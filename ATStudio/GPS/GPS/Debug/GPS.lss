
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000772  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  0000080a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e3b  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000467  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ca  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ba  00000000  00000000  00002567  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 02 	jmp	0x454	; 0x454 <__ctors_end>
   4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
   8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
   c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  10:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  14:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  18:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  1c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  24:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  28:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  2c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  30:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  34:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  3c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  44:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  4c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	00 00       	nop
  56:	00 c0       	rjmp	.+0      	; 0x58 <__trampolines_end+0x4>
  58:	c0 e0       	ldi	r28, 0x00	; 0
  5a:	e0 f0       	brcs	.+56     	; 0x94 <__trampolines_end+0x40>
  5c:	f8 ff       	.word	0xfff8	; ????
  5e:	ff ff       	.word	0xffff	; ????
  60:	ff ff       	.word	0xffff	; ????
  62:	ff 00       	.word	0x00ff	; ????
  64:	00 00       	nop
  66:	00 00       	nop
  68:	00 0f       	add	r16, r16
  6a:	0f 0f       	add	r16, r31
  6c:	0f 0f       	add	r16, r31
  6e:	0f ff       	.word	0xff0f	; ????
  70:	ff ff       	.word	0xffff	; ????
  72:	ff ff       	.word	0xffff	; ????
  74:	ff 00       	.word	0x00ff	; ????
	...
  7e:	00 00       	nop
  80:	00 ff       	sbrs	r16, 0
  82:	ff ff       	.word	0xffff	; ????
  84:	ff ff       	.word	0xffff	; ????
  86:	ff 00       	.word	0x00ff	; ????
	...
  90:	00 00       	nop
  92:	00 7f       	andi	r16, 0xF0	; 240
  94:	7f 7f       	andi	r23, 0xFF	; 255
  96:	7f 7f       	andi	r23, 0xFF	; 255
  98:	7f 00       	.word	0x007f	; ????
	...

00000254 <zero_logo>:
 254:	f0 fc fe fe ff ff ff 7f 3f 3f 00 00 ff ff fe fe     ........??......
 264:	fc f0 ff ff ff ff ff ff ff 00 00 00 00 00 ff ff     ................
 274:	ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00 00     ................
 284:	ff ff ff ff ff ff 1f 3f 7f 7f 7f 7f 7f 7e 7c 7c     .......?.....~||
 294:	00 00 7f 7f 7f 7f 3f 1f 00 00 00 00 00 00 00 00     ......?.........
	...

00000454 <__ctors_end>:
 454:	11 24       	eor	r1, r1
 456:	1f be       	out	0x3f, r1	; 63
 458:	cf e5       	ldi	r28, 0x5F	; 95
 45a:	d4 e0       	ldi	r29, 0x04	; 4
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	cd bf       	out	0x3d, r28	; 61

00000460 <__do_copy_data>:
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	a0 e6       	ldi	r26, 0x60	; 96
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e2 e7       	ldi	r30, 0x72	; 114
 468:	f7 e0       	ldi	r31, 0x07	; 7
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__do_copy_data+0x10>
 46c:	05 90       	lpm	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	a4 36       	cpi	r26, 0x64	; 100
 472:	b1 07       	cpc	r27, r17
 474:	d9 f7       	brne	.-10     	; 0x46c <__do_copy_data+0xc>

00000476 <__do_clear_bss>:
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	a4 e6       	ldi	r26, 0x64	; 100
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
 47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
 480:	a6 36       	cpi	r26, 0x66	; 102
 482:	b2 07       	cpc	r27, r18
 484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
 486:	0e 94 a1 03 	call	0x742	; 0x742 <main>
 48a:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

0000048e <__bad_interrupt>:
 48e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000492 <InitOLED>:



void InitOLED()
{
	TWBR = TWBR_VALUE;
 492:	88 e4       	ldi	r24, 0x48	; 72
 494:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
 496:	11 b8       	out	0x01, r1	; 1
	i2cstart(SSD1306_ADDR);
 498:	88 e7       	ldi	r24, 0x78	; 120
 49a:	0e 94 5f 03 	call	0x6be	; 0x6be <i2cstart>
	i2cwrite(0x00);
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	
	i2cwrite(SSD1306_DISPLAYOFF);                    // 0xAE
 4a4:	8e ea       	ldi	r24, 0xAE	; 174
 4a6:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 4aa:	85 ed       	ldi	r24, 0xD5	; 213
 4ac:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(0x80);                                  // the suggested ratio 0x80
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>

	i2cwrite(SSD1306_SETMULTIPLEX);                  // 0xA8
 4b6:	88 ea       	ldi	r24, 0xA8	; 168
 4b8:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_LCDHEIGHT - 1);
 4bc:	8f e3       	ldi	r24, 0x3F	; 63
 4be:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>

	i2cwrite(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 4c2:	83 ed       	ldi	r24, 0xD3	; 211
 4c4:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(0x0);                                   // no offset
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_SETSTARTLINE | 0x0);            // line #0
 4ce:	80 e4       	ldi	r24, 0x40	; 64
 4d0:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_CHARGEPUMP);                    // 0x8D
 4d4:	8d e8       	ldi	r24, 0x8D	; 141
 4d6:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	{
		i2cwrite(0x10);
	}
	else
	{
		i2cwrite(0x14);
 4da:	84 e1       	ldi	r24, 0x14	; 20
 4dc:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	}
	i2cwrite(0x20);             					   // 0x20  SSD1306_MEMORYMODE
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(0x00);                       	       // 0x0 act like ks0108
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_SEGREMAP | 0x1);
 4ec:	81 ea       	ldi	r24, 0xA1	; 161
 4ee:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_COMSCANDEC);
 4f2:	88 ec       	ldi	r24, 0xC8	; 200
 4f4:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	
	i2cwrite(SSD1306_SETCOMPINS);                    // 0xDA
 4f8:	8a ed       	ldi	r24, 0xDA	; 218
 4fa:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(0x02);
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_SETCONTRAST);                   // 0x81
 504:	81 e8       	ldi	r24, 0x81	; 129
 506:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(0x8F);
 50a:	8f e8       	ldi	r24, 0x8F	; 143
 50c:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	
	i2cwrite(SSD1306_SETPRECHARGE);                  // 0xd9
 510:	89 ed       	ldi	r24, 0xD9	; 217
 512:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	{
		i2cwrite(0x22);
	}
	else
	{
		i2cwrite(0xF1);
 516:	81 ef       	ldi	r24, 0xF1	; 241
 518:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	}
	i2cwrite(SSD1306_SETVCOMDETECT);                 // 0xDB
 51c:	8b ed       	ldi	r24, 0xDB	; 219
 51e:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(0x40);
 522:	80 e4       	ldi	r24, 0x40	; 64
 524:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 528:	84 ea       	ldi	r24, 0xA4	; 164
 52a:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_NORMALDISPLAY);                 // 0xA6
 52e:	86 ea       	ldi	r24, 0xA6	; 166
 530:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>

	i2cwrite(SSD1306_DEACTIVATE_SCROLL);
 534:	8e e2       	ldi	r24, 0x2E	; 46
 536:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>

	i2cwrite(SSD1306_DISPLAYON);//--turn on oled panel
 53a:	8f ea       	ldi	r24, 0xAF	; 175
 53c:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cstop();
 540:	0e 94 90 03 	call	0x720	; 0x720 <i2cstop>
	oled_pointer = 0x00;
 544:	10 92 64 00 	sts	0x0064, r1
 548:	08 95       	ret

0000054a <SetPointOLED>:
	

}

void SetPointOLED(uint8_t Start_Collumn, uint8_t End_Collumn, uint8_t Start_Page, uint8_t End_Page)
{
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	08 2f       	mov	r16, r24
 554:	16 2f       	mov	r17, r22
 556:	d4 2f       	mov	r29, r20
 558:	c2 2f       	mov	r28, r18
	i2cstart(SSD1306_ADDR);
 55a:	88 e7       	ldi	r24, 0x78	; 120
 55c:	0e 94 5f 03 	call	0x6be	; 0x6be <i2cstart>
	i2cwrite(CODE_COMMAND);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_COLUMNADDR);
 566:	81 e2       	ldi	r24, 0x21	; 33
 568:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(Start_Collumn);
 56c:	80 2f       	mov	r24, r16
 56e:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(End_Collumn);
 572:	81 2f       	mov	r24, r17
 574:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	
	i2cwrite(CODE_COMMAND);
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(SSD1306_PAGEADDR);
 57e:	82 e2       	ldi	r24, 0x22	; 34
 580:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(Start_Page);
 584:	8d 2f       	mov	r24, r29
 586:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cwrite(End_Page);
 58a:	8c 2f       	mov	r24, r28
 58c:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	i2cstop();
 590:	0e 94 90 03 	call	0x720	; 0x720 <i2cstop>
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <ClearOLED>:
	i2cwrite(data);
	i2cstop();
}

void ClearOLED()
{
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
 5aa:	27 e0       	ldi	r18, 0x07	; 7
 5ac:	44 e0       	ldi	r20, 0x04	; 4
 5ae:	6f e7       	ldi	r22, 0x7F	; 127
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 a5 02 	call	0x54a	; 0x54a <SetPointOLED>
	
	i2cstart(SSD1306_ADDR);
 5b6:	88 e7       	ldi	r24, 0x78	; 120
 5b8:	0e 94 5f 03 	call	0x6be	; 0x6be <i2cstart>
	i2cwrite(CODE_DATA);
 5bc:	80 e4       	ldi	r24, 0x40	; 64
 5be:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
 5c2:	04 e0       	ldi	r16, 0x04	; 4
 5c4:	10 e0       	ldi	r17, 0x00	; 0
	i2cwrite(data);
	i2cstop();
}

void ClearOLED()
{
 5c6:	68 94       	set
 5c8:	ee 24       	eor	r14, r14
 5ca:	e7 f8       	bld	r14, 7
 5cc:	f1 2c       	mov	r15, r1
 5ce:	0b c0       	rjmp	.+22     	; 0x5e6 <ClearOLED+0x48>
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB вверху, MSB снизу
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
 5d6:	21 97       	sbiw	r28, 0x01	; 1
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
 5d8:	20 97       	sbiw	r28, 0x00	; 0
 5da:	d1 f7       	brne	.-12     	; 0x5d0 <ClearOLED+0x32>
 5dc:	01 50       	subi	r16, 0x01	; 1
 5de:	11 09       	sbc	r17, r1
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
	
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	
	for(int kk = 0; kk < 4; kk++)
 5e0:	01 15       	cp	r16, r1
 5e2:	11 05       	cpc	r17, r1
 5e4:	19 f0       	breq	.+6      	; 0x5ec <ClearOLED+0x4e>
	i2cwrite(data);
	i2cstop();
}

void ClearOLED()
{
 5e6:	ce 2d       	mov	r28, r14
 5e8:	df 2d       	mov	r29, r15
 5ea:	f2 cf       	rjmp	.-28     	; 0x5d0 <ClearOLED+0x32>
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB вверху, MSB снизу
		}
	}
	i2cstop();
 5ec:	0e 94 90 03 	call	0x720	; 0x720 <i2cstop>
	oled_pointer = 0x00;
 5f0:	10 92 64 00 	sts	0x0064, r1
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	ff 90       	pop	r15
 5fe:	ef 90       	pop	r14
 600:	08 95       	ret

00000602 <SelectDisplay>:

void SelectDisplay(int i)
{
	switch(i)
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	91 05       	cpc	r25, r1
 606:	69 f0       	breq	.+26     	; 0x622 <SelectDisplay+0x20>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	91 05       	cpc	r25, r1
 60c:	19 f0       	breq	.+6      	; 0x614 <SelectDisplay+0x12>
 60e:	89 2b       	or	r24, r25
 610:	51 f4       	brne	.+20     	; 0x626 <SelectDisplay+0x24>
 612:	04 c0       	rjmp	.+8      	; 0x61c <SelectDisplay+0x1a>
	{
		case 2:
		{
			PORTB |= (PortB0 | PortB1);
 614:	88 b3       	in	r24, 0x18	; 24
 616:	83 60       	ori	r24, 0x03	; 3
 618:	88 bb       	out	0x18, r24	; 24
			break; 
 61a:	08 95       	ret
		}
		case 0:
		{
			PORTB |= (PortB0);
 61c:	c0 9a       	sbi	0x18, 0	; 24
			PORTB &= ~(PortB1);
 61e:	c1 98       	cbi	0x18, 1	; 24
			break;
 620:	08 95       	ret
		}
		case 1:
		{
			PORTB |= (PortB1);
 622:	c1 9a       	sbi	0x18, 1	; 24
			PORTB &= ~(PortB0);
 624:	c0 98       	cbi	0x18, 0	; 24
 626:	08 95       	ret

00000628 <SetOLED2>:
	}
	i2cstop();
}

uint8_t SetOLED2(int i)
{
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	c8 54       	subi	r28, 0x48	; 72
 63a:	d1 09       	sbc	r29, r1
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
	SetPointOLED(0x00, 0x11, 0x04, 0x07);
 646:	27 e0       	ldi	r18, 0x07	; 7
 648:	44 e0       	ldi	r20, 0x04	; 4
 64a:	61 e1       	ldi	r22, 0x11	; 17
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 a5 02 	call	0x54a	; 0x54a <SetPointOLED>
	i2cstart(SSD1306_ADDR);
 652:	88 e7       	ldi	r24, 0x78	; 120
 654:	0e 94 5f 03 	call	0x6be	; 0x6be <i2cstart>
	i2cwrite(CODE_DATA);
 658:	80 e4       	ldi	r24, 0x40	; 64
 65a:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
	unsigned char buffer[72];
	for(int b = 0; b < 2; b++)
		strcpy_P(buffer, (PGM_P)pgm_read_word(&(number_table[b])));
 65e:	e0 e6       	ldi	r30, 0x60	; 96
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	65 91       	lpm	r22, Z+
 664:	74 91       	lpm	r23, Z
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	0e 94 b0 03 	call	0x760	; 0x760 <strcpy_P>
 66e:	e2 e6       	ldi	r30, 0x62	; 98
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	65 91       	lpm	r22, Z+
 674:	74 91       	lpm	r23, Z
 676:	ce 01       	movw	r24, r28
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	0e 94 b0 03 	call	0x760	; 0x760 <strcpy_P>
 67e:	8e 01       	movw	r16, r28
 680:	0f 5f       	subi	r16, 0xFF	; 255
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	7e 01       	movw	r14, r28
 686:	89 e4       	ldi	r24, 0x49	; 73
 688:	e8 0e       	add	r14, r24
 68a:	f1 1c       	adc	r15, r1
	for(long int kk = 0; kk < 72; kk++)
	{
		i2cwrite(pgm_read_byte(&buffer[kk]));	//LSB вверху, MSB снизу
 68c:	f8 01       	movw	r30, r16
 68e:	84 91       	lpm	r24, Z
 690:	0e 94 81 03 	call	0x702	; 0x702 <i2cwrite>
 694:	0f 5f       	subi	r16, 0xFF	; 255
 696:	1f 4f       	sbci	r17, 0xFF	; 255
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	unsigned char buffer[72];
	for(int b = 0; b < 2; b++)
		strcpy_P(buffer, (PGM_P)pgm_read_word(&(number_table[b])));
	for(long int kk = 0; kk < 72; kk++)
 698:	0e 15       	cp	r16, r14
 69a:	1f 05       	cpc	r17, r15
 69c:	b9 f7       	brne	.-18     	; 0x68c <SetOLED2+0x64>
	{
		i2cwrite(pgm_read_byte(&buffer[kk]));	//LSB вверху, MSB снизу
	}
	i2cstop();
 69e:	0e 94 90 03 	call	0x720	; 0x720 <i2cstop>
}
 6a2:	c8 5b       	subi	r28, 0xB8	; 184
 6a4:	df 4f       	sbci	r29, 0xFF	; 255
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	ff 90       	pop	r15
 6ba:	ef 90       	pop	r14
 6bc:	08 95       	ret

000006be <i2cstart>:

uint8_t twi_status_register;

uint8_t i2cstart(uint8_t address)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6be:	94 ea       	ldi	r25, 0xA4	; 164
 6c0:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)))
 6c2:	06 b6       	in	r0, 0x36	; 54
 6c4:	07 fe       	sbrs	r0, 7
 6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <i2cstart+0x4>
		;

	twi_status_register = TW_STATUS & 0xF8;
 6c8:	91 b1       	in	r25, 0x01	; 1
 6ca:	98 7f       	andi	r25, 0xF8	; 248
 6cc:	90 93 65 00 	sts	0x0065, r25
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
 6d0:	98 30       	cpi	r25, 0x08	; 8
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <i2cstart+0x1a>
 6d4:	90 31       	cpi	r25, 0x10	; 16
 6d6:	89 f4       	brne	.+34     	; 0x6fa <i2cstart+0x3c>
	{
		return 1;
	}

	TWDR = address;
 6d8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 6da:	84 e8       	ldi	r24, 0x84	; 132
 6dc:	86 bf       	out	0x36, r24	; 54

	while(!(TWCR & (1<<TWINT)))
 6de:	06 b6       	in	r0, 0x36	; 54
 6e0:	07 fe       	sbrs	r0, 7
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <i2cstart+0x20>
		;

	twi_status_register = TW_STATUS & 0xF8;
 6e4:	91 b1       	in	r25, 0x01	; 1
 6e6:	98 7f       	andi	r25, 0xF8	; 248
 6e8:	90 93 65 00 	sts	0x0065, r25
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
 6ec:	98 31       	cpi	r25, 0x18	; 24
 6ee:	39 f0       	breq	.+14     	; 0x6fe <i2cstart+0x40>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 34       	cpi	r25, 0x40	; 64
 6f4:	29 f4       	brne	.+10     	; 0x700 <i2cstart+0x42>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret
		;

	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
	{
		return 1;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	08 95       	ret
	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
	{
		return 1;
	}
	return 0;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
}
 700:	08 95       	ret

00000702 <i2cwrite>:

uint8_t i2cwrite(uint8_t data)
{
	TWDR = data;
 702:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 704:	84 e8       	ldi	r24, 0x84	; 132
 706:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
 708:	06 b6       	in	r0, 0x36	; 54
 70a:	07 fe       	sbrs	r0, 7
 70c:	fd cf       	rjmp	.-6      	; 0x708 <i2cwrite+0x6>

	twi_status_register = TW_STATUS & 0xF8;
 70e:	91 b1       	in	r25, 0x01	; 1
 710:	98 7f       	andi	r25, 0xF8	; 248
 712:	90 93 65 00 	sts	0x0065, r25
	if (twi_status_register != TW_MT_DATA_ACK)
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	98 32       	cpi	r25, 0x28	; 40
 71a:	09 f4       	brne	.+2      	; 0x71e <i2cwrite+0x1c>
 71c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}	
}
 71e:	08 95       	ret

00000720 <i2cstop>:

void i2cstop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 720:	84 e9       	ldi	r24, 0x94	; 148
 722:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
 724:	06 b6       	in	r0, 0x36	; 54
 726:	04 fc       	sbrc	r0, 4
 728:	fd cf       	rjmp	.-6      	; 0x724 <i2cstop+0x4>
 72a:	08 95       	ret

0000072c <init_ports>:
void init_ports()
{
    // Input/Output Ports initialization
    // Port A initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
 72c:	1a ba       	out	0x1a, r1	; 26
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
 72e:	1b ba       	out	0x1b, r1	; 27

    // Port B initialization
    // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
    DDRB = PortB7 | PortB6 | PortB5 | PortB4 | PortB3 | PortB2 | PortB1 | PortB0;
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	87 bb       	out	0x17, r24	; 23
    // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
    PORTB &= ~(PortB7 | PortB6 | PortB5 | PortB4 | PortB3 | PortB2 | PortB1 | PortB0);
 734:	88 b3       	in	r24, 0x18	; 24
 736:	18 ba       	out	0x18, r1	; 24

    // Port C initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 738:	14 ba       	out	0x14, r1	; 20
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
 73a:	15 ba       	out	0x15, r1	; 21

    // Port D initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 73c:	11 ba       	out	0x11, r1	; 17
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
 73e:	12 ba       	out	0x12, r1	; 18
 740:	08 95       	ret

00000742 <main>:
void ssd1306_command(uint8_t data);

int main(void)
{

	init_ports();
 742:	0e 94 96 03 	call	0x72c	; 0x72c <init_ports>
	//WriteNum(G, P, S);
	//
	//
	//_delay_ms(1000);
	//SetIntensity(0);
	SelectDisplay(2);
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 01 03 	call	0x602	; 0x602 <SelectDisplay>
	InitOLED();
 74e:	0e 94 49 02 	call	0x492	; 0x492 <InitOLED>
	ClearOLED();
 752:	0e 94 cf 02 	call	0x59e	; 0x59e <ClearOLED>
	//SelectDisplay(2);
	//SetOLED1(avr_struct, avr_logo);
	//_delay_ms(1000);
	//SelectDisplay(2);
	//ClearOLED();
	SetOLED2(0);
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 14 03 	call	0x628	; 0x628 <SetOLED2>
 75e:	ff cf       	rjmp	.-2      	; 0x75e <main+0x1c>

00000760 <strcpy_P>:
 760:	fb 01       	movw	r30, r22
 762:	dc 01       	movw	r26, r24
 764:	05 90       	lpm	r0, Z+
 766:	0d 92       	st	X+, r0
 768:	00 20       	and	r0, r0
 76a:	e1 f7       	brne	.-8      	; 0x764 <strcpy_P+0x4>
 76c:	08 95       	ret

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
