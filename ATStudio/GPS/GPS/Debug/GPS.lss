
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001e6  008001e6  000005c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b09  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000306  00000000  00000000  0000118d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  00001493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000265  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035d  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ee       	ldi	r26, 0xE6	; 230
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3e       	cpi	r26, 0xE8	; 232
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  8a:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitOLED>:

uint8_t oled_pointer = 0x00;

void InitOLED()
{
	TWBR = TWBR_VALUE;
  92:	88 e4       	ldi	r24, 0x48	; 72
  94:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
  96:	11 b8       	out	0x01, r1	; 1
	i2cstart(SSD1306_ADDR);
  98:	88 e7       	ldi	r24, 0x78	; 120
  9a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2cstart>
	i2cwrite(0x00);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	
	i2cwrite(SSD1306_DISPLAYOFF);                    // 0xAE
  a4:	8e ea       	ldi	r24, 0xAE	; 174
  a6:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
  aa:	85 ed       	ldi	r24, 0xD5	; 213
  ac:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(0x80);                                  // the suggested ratio 0x80
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>

	i2cwrite(SSD1306_SETMULTIPLEX);                  // 0xA8
  b6:	88 ea       	ldi	r24, 0xA8	; 168
  b8:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_LCDHEIGHT - 1);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>

	i2cwrite(SSD1306_SETDISPLAYOFFSET);              // 0xD3
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(0x0);                                   // no offset
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_SETSTARTLINE | 0x0);            // line #0
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_CHARGEPUMP);                    // 0x8D
  d4:	8d e8       	ldi	r24, 0x8D	; 141
  d6:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	{
		i2cwrite(0x10);
	}
	else
	{
		i2cwrite(0x14);
  da:	84 e1       	ldi	r24, 0x14	; 20
  dc:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	}
	i2cwrite(0x20);             					   // 0x20  SSD1306_MEMORYMODE
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(0x00);                       	       // 0x0 act like ks0108
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_SEGREMAP | 0x1);
  ec:	81 ea       	ldi	r24, 0xA1	; 161
  ee:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_COMSCANDEC);
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	
	i2cwrite(SSD1306_SETCOMPINS);                    // 0xDA
  f8:	8a ed       	ldi	r24, 0xDA	; 218
  fa:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(0x02);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_SETCONTRAST);                   // 0x81
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(0x8F);
 10a:	8f e8       	ldi	r24, 0x8F	; 143
 10c:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	
	i2cwrite(SSD1306_SETPRECHARGE);                  // 0xd9
 110:	89 ed       	ldi	r24, 0xD9	; 217
 112:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	{
		i2cwrite(0x22);
	}
	else
	{
		i2cwrite(0xF1);
 116:	81 ef       	ldi	r24, 0xF1	; 241
 118:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	}
	i2cwrite(SSD1306_SETVCOMDETECT);                 // 0xDB
 11c:	8b ed       	ldi	r24, 0xDB	; 219
 11e:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(0x40);
 122:	80 e4       	ldi	r24, 0x40	; 64
 124:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 128:	84 ea       	ldi	r24, 0xA4	; 164
 12a:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_NORMALDISPLAY);                 // 0xA6
 12e:	86 ea       	ldi	r24, 0xA6	; 166
 130:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>

	i2cwrite(SSD1306_DEACTIVATE_SCROLL);
 134:	8e e2       	ldi	r24, 0x2E	; 46
 136:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>

	i2cwrite(SSD1306_DISPLAYON);//--turn on oled panel
 13a:	8f ea       	ldi	r24, 0xAF	; 175
 13c:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cstop();
 140:	0e 94 ae 01 	call	0x35c	; 0x35c <i2cstop>
 144:	08 95       	ret

00000146 <SetPointOLED>:
}
void SetPointOLED(uint8_t Start_Collumn, uint8_t End_Collumn, uint8_t Start_Page, uint8_t End_Page)
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	08 2f       	mov	r16, r24
 150:	16 2f       	mov	r17, r22
 152:	d4 2f       	mov	r29, r20
 154:	c2 2f       	mov	r28, r18
	i2cstart(SSD1306_ADDR);
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2cstart>
	i2cwrite(CODE_COMMAND);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_COLUMNADDR);
 162:	81 e2       	ldi	r24, 0x21	; 33
 164:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(Start_Collumn);
 168:	80 2f       	mov	r24, r16
 16a:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(End_Collumn);
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	
	i2cwrite(CODE_COMMAND);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(SSD1306_PAGEADDR);
 17a:	82 e2       	ldi	r24, 0x22	; 34
 17c:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(Start_Page);
 180:	8d 2f       	mov	r24, r29
 182:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(End_Page);
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cstop();
 18c:	0e 94 ae 01 	call	0x35c	; 0x35c <i2cstop>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <OLED_Command>:
void OLED_Command(uint8_t data)
{
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
	i2cstart(SSD1306_ADDR);
 19e:	88 e7       	ldi	r24, 0x78	; 120
 1a0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2cstart>
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cwrite(data);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	i2cstop();
 1b0:	0e 94 ae 01 	call	0x35c	; 0x35c <i2cstop>
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <ClearOLED>:
void ClearOLED()
{
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
 1c4:	27 e0       	ldi	r18, 0x07	; 7
 1c6:	44 e0       	ldi	r20, 0x04	; 4
 1c8:	6f e7       	ldi	r22, 0x7F	; 127
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 a3 00 	call	0x146	; 0x146 <SetPointOLED>
	
	i2cstart(SSD1306_ADDR);
 1d0:	88 e7       	ldi	r24, 0x78	; 120
 1d2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2cstart>
	i2cwrite(CODE_DATA);
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
 1dc:	04 e0       	ldi	r16, 0x04	; 4
 1de:	10 e0       	ldi	r17, 0x00	; 0
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
	i2cwrite(data);
	i2cstop();
}
void ClearOLED()
{
 1e0:	68 94       	set
 1e2:	ee 24       	eor	r14, r14
 1e4:	e7 f8       	bld	r14, 7
 1e6:	f1 2c       	mov	r15, r1
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <ClearOLED+0x48>
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB вверху, MSB снизу
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
 1f0:	21 97       	sbiw	r28, 0x01	; 1
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
 1f2:	20 97       	sbiw	r28, 0x00	; 0
 1f4:	d1 f7       	brne	.-12     	; 0x1ea <ClearOLED+0x32>
 1f6:	01 50       	subi	r16, 0x01	; 1
 1f8:	11 09       	sbc	r17, r1
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
	
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	
	for(int kk = 0; kk < 4; kk++)
 1fa:	01 15       	cp	r16, r1
 1fc:	11 05       	cpc	r17, r1
 1fe:	19 f0       	breq	.+6      	; 0x206 <ClearOLED+0x4e>
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
	i2cwrite(data);
	i2cstop();
}
void ClearOLED()
{
 200:	ce 2d       	mov	r28, r14
 202:	df 2d       	mov	r29, r15
 204:	f2 cf       	rjmp	.-28     	; 0x1ea <ClearOLED+0x32>
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB вверху, MSB снизу
		}
	}
	i2cstop();
 206:	0e 94 ae 01 	call	0x35c	; 0x35c <i2cstop>
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <SetOLED>:

void SetOLED(void)
{
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
	oled_pointer = 0x00;
 224:	10 92 e6 01 	sts	0x01E6, r1
	OLED_Command(SSD1306_DISPLAYOFF);
 228:	8e ea       	ldi	r24, 0xAE	; 174
 22a:	0e 94 cd 00 	call	0x19a	; 0x19a <OLED_Command>
	SetPointOLED(0x00, oled_pointer += serp_logo.long_image, 0x04, (0x04 + serp_logo.height_image));
 22e:	20 91 e5 01 	lds	r18, 0x01E5
 232:	2c 5f       	subi	r18, 0xFC	; 252
 234:	60 91 e3 01 	lds	r22, 0x01E3
 238:	80 91 e6 01 	lds	r24, 0x01E6
 23c:	68 0f       	add	r22, r24
 23e:	60 93 e6 01 	sts	0x01E6, r22
 242:	44 e0       	ldi	r20, 0x04	; 4
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 a3 00 	call	0x146	; 0x146 <SetPointOLED>

	i2cstart(SSD1306_ADDR);
 24a:	88 e7       	ldi	r24, 0x78	; 120
 24c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2cstart>
	i2cwrite(CODE_DATA);
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	for(int kk = 0; kk < serp_logo.long_array; kk++)
 256:	80 91 e2 01 	lds	r24, 0x01E2
 25a:	88 23       	and	r24, r24
 25c:	b1 f0       	breq	.+44     	; 0x28a <SetOLED+0x72>
 25e:	02 e6       	ldi	r16, 0x62	; 98
 260:	11 e0       	ldi	r17, 0x01	; 1
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	0f 2e       	mov	r0, r31
 268:	f2 ee       	ldi	r31, 0xE2	; 226
 26a:	ef 2e       	mov	r14, r31
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	ff 2e       	mov	r15, r31
 270:	f0 2d       	mov	r31, r0
	{
		i2cwrite(serp_logo.serp[kk]);	//LSB вверху, MSB снизу
 272:	f8 01       	movw	r30, r16
 274:	81 91       	ld	r24, Z+
 276:	8f 01       	movw	r16, r30
 278:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(0x00, oled_pointer += serp_logo.long_image, 0x04, (0x04 + serp_logo.height_image));

	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	for(int kk = 0; kk < serp_logo.long_array; kk++)
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	f7 01       	movw	r30, r14
 280:	80 81       	ld	r24, Z
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	c8 17       	cp	r28, r24
 286:	d9 07       	cpc	r29, r25
 288:	a4 f3       	brlt	.-24     	; 0x272 <SetOLED+0x5a>
	{
		i2cwrite(serp_logo.serp[kk]);	//LSB вверху, MSB снизу
	}
	i2cstop();
 28a:	0e 94 ae 01 	call	0x35c	; 0x35c <i2cstop>
	OLED_Command(SSD1306_DISPLAYON);
 28e:	8f ea       	ldi	r24, 0xAF	; 175
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <OLED_Command>
	
	//_delay_ms(1000);
	//OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(0x2a, 0x2a+bsuir_logo.long_image, 0x04, 0x04 + bsuir_logo.height_image);
 294:	20 91 61 01 	lds	r18, 0x0161
 298:	2c 5f       	subi	r18, 0xFC	; 252
 29a:	60 91 60 01 	lds	r22, 0x0160
 29e:	66 5d       	subi	r22, 0xD6	; 214
 2a0:	44 e0       	ldi	r20, 0x04	; 4
 2a2:	8a e2       	ldi	r24, 0x2A	; 42
 2a4:	0e 94 a3 00 	call	0x146	; 0x146 <SetPointOLED>
	i2cstart(SSD1306_ADDR);
 2a8:	88 e7       	ldi	r24, 0x78	; 120
 2aa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2cstart>
	i2cwrite(CODE_DATA);
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	for(int kk = 0; kk < bsuir_logo.long_array; kk++)
 2b4:	80 91 5f 01 	lds	r24, 0x015F
 2b8:	88 23       	and	r24, r24
 2ba:	b1 f0       	breq	.+44     	; 0x2e8 <SetOLED+0xd0>
 2bc:	00 e6       	ldi	r16, 0x60	; 96
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	0f 2e       	mov	r0, r31
 2c6:	ff e5       	ldi	r31, 0x5F	; 95
 2c8:	ef 2e       	mov	r14, r31
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	ff 2e       	mov	r15, r31
 2ce:	f0 2d       	mov	r31, r0
	{
		i2cwrite(bsuir_logo.bsuir[kk]);
 2d0:	f8 01       	movw	r30, r16
 2d2:	81 91       	ld	r24, Z+
 2d4:	8f 01       	movw	r16, r30
 2d6:	0e 94 9f 01 	call	0x33e	; 0x33e <i2cwrite>
	//_delay_ms(1000);
	//OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(0x2a, 0x2a+bsuir_logo.long_image, 0x04, 0x04 + bsuir_logo.height_image);
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	for(int kk = 0; kk < bsuir_logo.long_array; kk++)
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	f7 01       	movw	r30, r14
 2de:	80 81       	ld	r24, Z
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	c8 17       	cp	r28, r24
 2e4:	d9 07       	cpc	r29, r25
 2e6:	a4 f3       	brlt	.-24     	; 0x2d0 <SetOLED+0xb8>
	{
		i2cwrite(bsuir_logo.bsuir[kk]);
	}
	i2cstop();
 2e8:	0e 94 ae 01 	call	0x35c	; 0x35c <i2cstop>
	//
	//i2cwrite(AVRlogo[kk]);	//LSB вверху, MSB снизу
	//}
	//i2cstop();
	
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	08 95       	ret

000002fa <i2cstart>:

uint8_t twi_status_register;

uint8_t i2cstart(uint8_t address)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2fa:	94 ea       	ldi	r25, 0xA4	; 164
 2fc:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)))
 2fe:	06 b6       	in	r0, 0x36	; 54
 300:	07 fe       	sbrs	r0, 7
 302:	fd cf       	rjmp	.-6      	; 0x2fe <i2cstart+0x4>
		;

	twi_status_register = TW_STATUS & 0xF8;
 304:	91 b1       	in	r25, 0x01	; 1
 306:	98 7f       	andi	r25, 0xF8	; 248
 308:	90 93 e7 01 	sts	0x01E7, r25
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
 30c:	98 30       	cpi	r25, 0x08	; 8
 30e:	11 f0       	breq	.+4      	; 0x314 <i2cstart+0x1a>
 310:	90 31       	cpi	r25, 0x10	; 16
 312:	89 f4       	brne	.+34     	; 0x336 <i2cstart+0x3c>
	{
		return 1;
	}

	TWDR = address;
 314:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 316:	84 e8       	ldi	r24, 0x84	; 132
 318:	86 bf       	out	0x36, r24	; 54

	while(!(TWCR & (1<<TWINT)))
 31a:	06 b6       	in	r0, 0x36	; 54
 31c:	07 fe       	sbrs	r0, 7
 31e:	fd cf       	rjmp	.-6      	; 0x31a <i2cstart+0x20>
		;

	twi_status_register = TW_STATUS & 0xF8;
 320:	91 b1       	in	r25, 0x01	; 1
 322:	98 7f       	andi	r25, 0xF8	; 248
 324:	90 93 e7 01 	sts	0x01E7, r25
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
 328:	98 31       	cpi	r25, 0x18	; 24
 32a:	39 f0       	breq	.+14     	; 0x33a <i2cstart+0x40>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 34       	cpi	r25, 0x40	; 64
 330:	29 f4       	brne	.+10     	; 0x33c <i2cstart+0x42>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret
		;

	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
	{
		return 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	08 95       	ret
	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
	{
		return 1;
	}
	return 0;
 33a:	80 e0       	ldi	r24, 0x00	; 0
}
 33c:	08 95       	ret

0000033e <i2cwrite>:

uint8_t i2cwrite(uint8_t data)
{
	TWDR = data;
 33e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 340:	84 e8       	ldi	r24, 0x84	; 132
 342:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
 344:	06 b6       	in	r0, 0x36	; 54
 346:	07 fe       	sbrs	r0, 7
 348:	fd cf       	rjmp	.-6      	; 0x344 <i2cwrite+0x6>

	twi_status_register = TW_STATUS & 0xF8;
 34a:	91 b1       	in	r25, 0x01	; 1
 34c:	98 7f       	andi	r25, 0xF8	; 248
 34e:	90 93 e7 01 	sts	0x01E7, r25
	if (twi_status_register != TW_MT_DATA_ACK)
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	98 32       	cpi	r25, 0x28	; 40
 356:	09 f4       	brne	.+2      	; 0x35a <i2cwrite+0x1c>
 358:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}	
}
 35a:	08 95       	ret

0000035c <i2cstop>:

void i2cstop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 35c:	84 e9       	ldi	r24, 0x94	; 148
 35e:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
 360:	06 b6       	in	r0, 0x36	; 54
 362:	04 fc       	sbrc	r0, 4
 364:	fd cf       	rjmp	.-6      	; 0x360 <i2cstop+0x4>
 366:	08 95       	ret

00000368 <main>:



int main(void)
{
	DDRB |= ((1<<PORTB0)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //ножки SPI на выход
 368:	87 b3       	in	r24, 0x17	; 23
 36a:	89 6b       	ori	r24, 0xB9	; 185
 36c:	87 bb       	out	0x17, r24	; 23
	//PORTA |= PortA0;
	PORTB |= ((1<<PORTB0)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //низкий уровень
 36e:	88 b3       	in	r24, 0x18	; 24
 370:	89 6b       	ori	r24, 0xB9	; 185
 372:	88 bb       	out	0x18, r24	; 24
	//
	//WriteNum(NINE, EITHT, SEVEN);
	//_delay_ms(100);
	//WriteNum(Z, Y, X);
	
	PORTB |= (1<<PORTB4);
 374:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB3);
 376:	c3 98       	cbi	0x18, 3	; 24
	
	//_delay_ms(10);
	InitOLED();
 378:	0e 94 49 00 	call	0x92	; 0x92 <InitOLED>
	PORTB |= (1<<PORTB3);
 37c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<PORTB4);
 37e:	c4 98       	cbi	0x18, 4	; 24
	InitOLED();
 380:	0e 94 49 00 	call	0x92	; 0x92 <InitOLED>
	PORTB |= (1<<PORTB4);
 384:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB3);
 386:	c3 98       	cbi	0x18, 3	; 24
	ClearOLED();
 388:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ClearOLED>
	PORTB |= (1<<PORTB3);
 38c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<PORTB4);
 38e:	c4 98       	cbi	0x18, 4	; 24
	ClearOLED();
 390:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ClearOLED>
	PORTB |= (1<<PORTB4);
 394:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB3);
 396:	c3 98       	cbi	0x18, 3	; 24
	SetOLED();
 398:	0e 94 0c 01 	call	0x218	; 0x218 <SetOLED>
	PORTB |= (1<<PORTB3);
 39c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<PORTB4);
 39e:	c4 98       	cbi	0x18, 4	; 24
	SetOLED();
 3a0:	0e 94 0c 01 	call	0x218	; 0x218 <SetOLED>
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <main+0x3c>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
