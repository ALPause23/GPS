
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000924  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000998  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000120  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012a6  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005d7  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000664  00000000  00000000  00002365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000268  00000000  00000000  000029cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000376  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000087f  00000000  00000000  00002faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  00003829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 02 	jmp	0x472	; 0x472 <__ctors_end>
   4:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
   8:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
   c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  10:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  14:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  18:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  1c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  20:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  24:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  28:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  2c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  30:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  34:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  38:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  3c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  40:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  44:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  48:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  4c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>
  50:	0c 94 4b 02 	jmp	0x496	; 0x496 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	01 03       	mulsu	r16, r17
  56:	03 03       	mulsu	r16, r19
  58:	07 06       	cpc	r0, r23
  5a:	06 0e       	add	r0, r22
  5c:	1e 1c       	adc	r1, r14
  5e:	1c 3c       	cpi	r17, 0xCC	; 204
  60:	78 78       	andi	r23, 0x88	; 136
  62:	70 e0       	ldi	r23, 0x00	; 0
  64:	e0 e0       	ldi	r30, 0x00	; 0
  66:	c0 80       	ld	r12, Z
  68:	80 80       	ld	r8, Z
	...
  7a:	00 80       	ld	r0, Z
  7c:	80 80       	ld	r8, Z
  7e:	80 80       	ld	r8, Z
  80:	80 80       	ld	r8, Z
  82:	80 80       	ld	r8, Z
  84:	83 83       	std	Z+3, r24	; 0x03
  86:	87 8f       	std	Z+31, r24	; 0x1f
  88:	8f bf       	out	0x3f, r24	; 63
  8a:	fe fc       	.word	0xfcfe	; ????
  8c:	fc f8       	.word	0xf8fc	; ????
  8e:	f0 f0       	brcs	.+60     	; 0xcc <__trampolines_end+0x78>
  90:	c0 80       	ld	r12, Z
  92:	00 00       	nop
  94:	00 00       	nop
  96:	00 00       	nop
  98:	00 0e       	add	r0, r16
  9a:	0f 0f       	add	r16, r31
  9c:	0f 0f       	add	r16, r31
  9e:	0f ef       	ldi	r16, 0xFF	; 255
  a0:	ff ff       	.word	0xffff	; ????
  a2:	ff ff       	.word	0xffff	; ????
  a4:	ff ff       	.word	0xffff	; ????
  a6:	3f 0f       	add	r19, r31
  a8:	0f 0f       	add	r16, r31
  aa:	0f cf       	rjmp	.-482    	; 0xfffffeca <__eeprom_end+0xff7efeca>
  ac:	ff ff       	.word	0xffff	; ????
  ae:	ff ff       	.word	0xffff	; ????
  b0:	ff ff       	.word	0xffff	; ????
  b2:	fe 38       	cpi	r31, 0x8E	; 142
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	00 00       	nop
  ba:	00 f8       	bld	r0, 0
  bc:	f8 f8       	.word	0xf8f8	; ????
  be:	ff ff       	.word	0xffff	; ????
  c0:	ff ff       	.word	0xffff	; ????
  c2:	ff ff       	.word	0xffff	; ????
  c4:	ff f8       	.word	0xf8ff	; ????
  c6:	f8 f8       	.word	0xf8f8	; ????
  c8:	f8 fc       	.word	0xfcf8	; ????
  ca:	7f 7f       	andi	r23, 0xFF	; 255
  cc:	7f 7f       	andi	r23, 0xFF	; 255
  ce:	3f 1f       	adc	r19, r31
  d0:	1f 07       	cpc	r17, r31
  d2:	01 00       	.word	0x0001	; ????
	...
 254:	80 1f       	adc	r24, r16
 256:	03 3c       	cpi	r16, 0xC3	; 195

00000257 <S>:
 257:	3c 66 70 38 0e 66 3c 00                             <fp8.f<.

0000025f <P>:
 25f:	7c 66 66 7c 60 60 60 00                             |ff|```.

00000267 <G>:
 267:	3c 66 c0 c0 ce 66 3c 00                             <f...f<.

0000026f <serp_logo>:
 26f:	01 03 03 03 07 06 06 0e 1e 1c 1c 3c 78 78 70 e0     ...........<xxp.
 27f:	e0 e0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
 28f:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
 29f:	83 83 87 8f 8f bf fe fc fc f8 f0 f0 c0 80 00 00     ................
 2af:	00 00 00 00 00 0e 0f 0f 0f 0f 0f ef ff ff ff ff     ................
 2bf:	ff ff 3f 0f 0f 0f 0f cf ff ff ff ff ff ff fe 38     ..?............8
 2cf:	00 00 00 00 00 00 00 f8 f8 f8 ff ff ff ff ff ff     ................
 2df:	ff f8 f8 f8 f8 fc 7f 7f 7f 7f 3f 1f 1f 07 01 00     ..........?.....
	...
 46f:	80 1f 03                                            ...

00000472 <__ctors_end>:
 472:	11 24       	eor	r1, r1
 474:	1f be       	out	0x3f, r1	; 63
 476:	cf e5       	ldi	r28, 0x5F	; 95
 478:	d4 e0       	ldi	r29, 0x04	; 4
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	cd bf       	out	0x3d, r28	; 61

0000047e <__do_clear_bss>:
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	a0 e6       	ldi	r26, 0x60	; 96
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	01 c0       	rjmp	.+2      	; 0x488 <.do_clear_bss_start>

00000486 <.do_clear_bss_loop>:
 486:	1d 92       	st	X+, r1

00000488 <.do_clear_bss_start>:
 488:	a2 36       	cpi	r26, 0x62	; 98
 48a:	b2 07       	cpc	r27, r18
 48c:	e1 f7       	brne	.-8      	; 0x486 <.do_clear_bss_loop>
 48e:	0e 94 36 04 	call	0x86c	; 0x86c <main>
 492:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

00000496 <__bad_interrupt>:
 496:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000049a <SPI_WriteStartByte>:
	SendLed((SHUTDOWN >> 8), (SHUTDOWN | 0x00));
}

void SPI_WriteStartByte(char data)
{
	PORTB &= ~(CS);
 49a:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data;
 49c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 49e:	77 9b       	sbis	0x0e, 7	; 14
 4a0:	fe cf       	rjmp	.-4      	; 0x49e <SPI_WriteStartByte+0x4>
}
 4a2:	08 95       	ret

000004a4 <SPI_WriteEndByte>:

void SPI_WriteEndByte(char data)
{
	SPDR = data;
 4a4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 4a6:	77 9b       	sbis	0x0e, 7	; 14
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <SPI_WriteEndByte+0x2>
	PORTB |= (CS);
 4aa:	c4 9a       	sbi	0x18, 4	; 24
 4ac:	08 95       	ret

000004ae <SPI_WriteByte>:
}

void SPI_WriteByte(char data)
{
	SPDR = data;
 4ae:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 4b0:	77 9b       	sbis	0x0e, 7	; 14
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <SPI_WriteByte+0x2>
}
 4b4:	08 95       	ret

000004b6 <SendLed>:

void SendLed(char adr, char data)
{
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	08 2f       	mov	r16, r24
 4c0:	16 2f       	mov	r17, r22
 4c2:	c3 e0       	ldi	r28, 0x03	; 3
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
	while(i < 3)
	{
		SPI_WriteStartByte(adr);
 4c6:	80 2f       	mov	r24, r16
 4c8:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_WriteStartByte>
		SPI_WriteEndByte(data);
 4cc:	81 2f       	mov	r24, r17
 4ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SPI_WriteEndByte>
 4d2:	21 97       	sbiw	r28, 0x01	; 1
}

void SendLed(char adr, char data)
{
	int i = 0;
	while(i < 3)
 4d4:	20 97       	sbiw	r28, 0x00	; 0
 4d6:	b9 f7       	brne	.-18     	; 0x4c6 <SendLed+0x10>
	{
		SPI_WriteStartByte(adr);
		SPI_WriteEndByte(data);
		i++;
	}
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	08 95       	ret

000004e2 <InitLed>:
void SPI_WriteByte(char data);
void SendLed(char adr, char data);

void InitLed()
{
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 4e2:	80 e5       	ldi	r24, 0x50	; 80
 4e4:	8d b9       	out	0x0d, r24	; 13
	SPSR=(0<<SPI2X);
 4e6:	1e b8       	out	0x0e, r1	; 14
	
	// инициализация дисплея
	SendLed((DISPLAY_TEST >> 8), (DISPLAY_TEST | 0x00));
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
	SendLed((INTENSITY >> 8), (INTENSITY | 0x0f));
 4f0:	6f e0       	ldi	r22, 0x0F	; 15
 4f2:	8a e0       	ldi	r24, 0x0A	; 10
 4f4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
	SendLed((SCAN_LIMIT >> 8), (SCAN_LIMIT | 0x07));
 4f8:	67 e0       	ldi	r22, 0x07	; 7
 4fa:	8b e0       	ldi	r24, 0x0B	; 11
 4fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
	SendLed((NO_DECODE_MODE >> 8), (NO_DECODE_MODE | 0x00));
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	89 e0       	ldi	r24, 0x09	; 9
 504:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
	SendLed((SHUTDOWN >> 8), (SHUTDOWN | 0x00));
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	8c e0       	ldi	r24, 0x0C	; 12
 50c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
 510:	08 95       	ret

00000512 <ClearDisplay>:
		i++;
	}
}

void ClearDisplay()
{
 512:	cf 93       	push	r28
	for(char j = 1; j <= 8; j++)
 514:	c1 e0       	ldi	r28, 0x01	; 1
	{
		SendLed(j,0);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	8c 2f       	mov	r24, r28
 51a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
	}
}

void ClearDisplay()
{
	for(char j = 1; j <= 8; j++)
 51e:	cf 5f       	subi	r28, 0xFF	; 255
 520:	c9 30       	cpi	r28, 0x09	; 9
 522:	c9 f7       	brne	.-14     	; 0x516 <ClearDisplay+0x4>
	{
		SendLed(j,0);
	}
	SendLed((SHUTDOWN >> 8), (SHUTDOWN | 0x01));
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	8c e0       	ldi	r24, 0x0C	; 12
 528:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
}
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <WriteNum>:

void WriteNum(char *z, char *y, char *x)
{
 530:	bf 92       	push	r11
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	6c 01       	movw	r12, r24
 544:	7b 01       	movw	r14, r22
 546:	8a 01       	movw	r16, r20
	for(int i = 0; i < 8; i++)
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PORTB &= ~(CS);
 54c:	c4 98       	cbi	0x18, 4	; 24
 54e:	bc 2e       	mov	r11, r28
 550:	b3 94       	inc	r11
		
		SPI_WriteByte(i + 1);
 552:	8b 2d       	mov	r24, r11
 554:	0e 94 57 02 	call	0x4ae	; 0x4ae <SPI_WriteByte>
 558:	f6 01       	movw	r30, r12
 55a:	ec 0f       	add	r30, r28
 55c:	fd 1f       	adc	r31, r29
		SPI_WriteByte(pgm_read_byte(&(z[i])));
 55e:	84 91       	lpm	r24, Z
 560:	0e 94 57 02 	call	0x4ae	; 0x4ae <SPI_WriteByte>
		
		SPI_WriteByte(i + 1);
 564:	8b 2d       	mov	r24, r11
 566:	0e 94 57 02 	call	0x4ae	; 0x4ae <SPI_WriteByte>
 56a:	f7 01       	movw	r30, r14
 56c:	ec 0f       	add	r30, r28
 56e:	fd 1f       	adc	r31, r29
		SPI_WriteByte(pgm_read_byte(&(y[i])));
 570:	84 91       	lpm	r24, Z
 572:	0e 94 57 02 	call	0x4ae	; 0x4ae <SPI_WriteByte>
		
		SPI_WriteByte(i + 1);
 576:	8b 2d       	mov	r24, r11
 578:	0e 94 57 02 	call	0x4ae	; 0x4ae <SPI_WriteByte>
 57c:	f8 01       	movw	r30, r16
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
		SPI_WriteByte(pgm_read_byte(&(x[i])));
 582:	84 91       	lpm	r24, Z
 584:	0e 94 57 02 	call	0x4ae	; 0x4ae <SPI_WriteByte>
		
		PORTB |= CS;
 588:	c4 9a       	sbi	0x18, 4	; 24
	SendLed((SHUTDOWN >> 8), (SHUTDOWN | 0x01));
}

void WriteNum(char *z, char *y, char *x)
{
	for(int i = 0; i < 8; i++)
 58a:	21 96       	adiw	r28, 0x01	; 1
 58c:	c8 30       	cpi	r28, 0x08	; 8
 58e:	d1 05       	cpc	r29, r1
 590:	e9 f6       	brne	.-70     	; 0x54c <WriteNum+0x1c>
		SPI_WriteByte(i + 1);
		SPI_WriteByte(pgm_read_byte(&(x[i])));
		
		PORTB |= CS;
	}
}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	bf 90       	pop	r11
 5a4:	08 95       	ret

000005a6 <SetIntensity>:

void SetIntensity(uint8_t a)  // 0 down to 15
{
	SendLed((INTENSITY >> 8), (SHUTDOWN | a));
 5a6:	68 2f       	mov	r22, r24
 5a8:	8a e0       	ldi	r24, 0x0A	; 10
 5aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SendLed>
 5ae:	08 95       	ret

000005b0 <InitOLED>:
	return oled_pointer;
}

void InitOLED()
{
	TWBR = TWBR_VALUE;
 5b0:	88 e4       	ldi	r24, 0x48	; 72
 5b2:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
 5b4:	11 b8       	out	0x01, r1	; 1
	i2cstart(SSD1306_ADDR);
 5b6:	88 e7       	ldi	r24, 0x78	; 120
 5b8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2cstart>
	i2cwrite(0x00);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	
	i2cwrite(SSD1306_DISPLAYOFF);                    // 0xAE
 5c2:	8e ea       	ldi	r24, 0xAE	; 174
 5c4:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 5c8:	85 ed       	ldi	r24, 0xD5	; 213
 5ca:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(0x80);                                  // the suggested ratio 0x80
 5ce:	80 e8       	ldi	r24, 0x80	; 128
 5d0:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>

	i2cwrite(SSD1306_SETMULTIPLEX);                  // 0xA8
 5d4:	88 ea       	ldi	r24, 0xA8	; 168
 5d6:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_LCDHEIGHT - 1);
 5da:	8f e3       	ldi	r24, 0x3F	; 63
 5dc:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>

	i2cwrite(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 5e0:	83 ed       	ldi	r24, 0xD3	; 211
 5e2:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(0x0);                                   // no offset
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_SETSTARTLINE | 0x0);            // line #0
 5ec:	80 e4       	ldi	r24, 0x40	; 64
 5ee:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_CHARGEPUMP);                    // 0x8D
 5f2:	8d e8       	ldi	r24, 0x8D	; 141
 5f4:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	{
		i2cwrite(0x10);
	}
	else
	{
		i2cwrite(0x14);
 5f8:	84 e1       	ldi	r24, 0x14	; 20
 5fa:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	}
	i2cwrite(0x20);             					   // 0x20  SSD1306_MEMORYMODE
 5fe:	80 e2       	ldi	r24, 0x20	; 32
 600:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(0x00);                       	       // 0x0 act like ks0108
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_SEGREMAP | 0x1);
 60a:	81 ea       	ldi	r24, 0xA1	; 161
 60c:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_COMSCANDEC);
 610:	88 ec       	ldi	r24, 0xC8	; 200
 612:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	
	i2cwrite(SSD1306_SETCOMPINS);                    // 0xDA
 616:	8a ed       	ldi	r24, 0xDA	; 218
 618:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(0x02);
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_SETCONTRAST);                   // 0x81
 622:	81 e8       	ldi	r24, 0x81	; 129
 624:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(0x8F);
 628:	8f e8       	ldi	r24, 0x8F	; 143
 62a:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	
	i2cwrite(SSD1306_SETPRECHARGE);                  // 0xd9
 62e:	89 ed       	ldi	r24, 0xD9	; 217
 630:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	{
		i2cwrite(0x22);
	}
	else
	{
		i2cwrite(0xF1);
 634:	81 ef       	ldi	r24, 0xF1	; 241
 636:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	}
	i2cwrite(SSD1306_SETVCOMDETECT);                 // 0xDB
 63a:	8b ed       	ldi	r24, 0xDB	; 219
 63c:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(0x40);
 640:	80 e4       	ldi	r24, 0x40	; 64
 642:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 646:	84 ea       	ldi	r24, 0xA4	; 164
 648:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_NORMALDISPLAY);                 // 0xA6
 64c:	86 ea       	ldi	r24, 0xA6	; 166
 64e:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>

	i2cwrite(SSD1306_DEACTIVATE_SCROLL);
 652:	8e e2       	ldi	r24, 0x2E	; 46
 654:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>

	i2cwrite(SSD1306_DISPLAYON);//--turn on oled panel
 658:	8f ea       	ldi	r24, 0xAF	; 175
 65a:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cstop();
 65e:	0e 94 25 04 	call	0x84a	; 0x84a <i2cstop>
	oled_pointer = 0x00;
 662:	10 92 60 00 	sts	0x0060, r1
 666:	08 95       	ret

00000668 <SetPointOLED>:
}

void SetPointOLED(uint8_t Start_Collumn, uint8_t End_Collumn, uint8_t Start_Page, uint8_t End_Page)
{
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	08 2f       	mov	r16, r24
 672:	16 2f       	mov	r17, r22
 674:	d4 2f       	mov	r29, r20
 676:	c2 2f       	mov	r28, r18
	i2cstart(SSD1306_ADDR);
 678:	88 e7       	ldi	r24, 0x78	; 120
 67a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2cstart>
	i2cwrite(CODE_COMMAND);
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_COLUMNADDR);
 684:	81 e2       	ldi	r24, 0x21	; 33
 686:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(Start_Collumn);
 68a:	80 2f       	mov	r24, r16
 68c:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(End_Collumn);
 690:	81 2f       	mov	r24, r17
 692:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	
	i2cwrite(CODE_COMMAND);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(SSD1306_PAGEADDR);
 69c:	82 e2       	ldi	r24, 0x22	; 34
 69e:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(Start_Page);
 6a2:	8d 2f       	mov	r24, r29
 6a4:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(End_Page);
 6a8:	8c 2f       	mov	r24, r28
 6aa:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cstop();
 6ae:	0e 94 25 04 	call	0x84a	; 0x84a <i2cstop>
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	08 95       	ret

000006bc <OLED_Command>:

void OLED_Command(uint8_t data)
{
 6bc:	cf 93       	push	r28
 6be:	c8 2f       	mov	r28, r24
	i2cstart(SSD1306_ADDR);
 6c0:	88 e7       	ldi	r24, 0x78	; 120
 6c2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2cstart>
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cwrite(data);
 6cc:	8c 2f       	mov	r24, r28
 6ce:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	i2cstop();
 6d2:	0e 94 25 04 	call	0x84a	; 0x84a <i2cstop>
}
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <ClearOLED>:

void ClearOLED()
{
 6da:	ef 92       	push	r14
 6dc:	ff 92       	push	r15
 6de:	0f 93       	push	r16
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
 6e6:	27 e0       	ldi	r18, 0x07	; 7
 6e8:	44 e0       	ldi	r20, 0x04	; 4
 6ea:	6f e7       	ldi	r22, 0x7F	; 127
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	0e 94 34 03 	call	0x668	; 0x668 <SetPointOLED>
	
	i2cstart(SSD1306_ADDR);
 6f2:	88 e7       	ldi	r24, 0x78	; 120
 6f4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2cstart>
	i2cwrite(CODE_DATA);
 6f8:	80 e4       	ldi	r24, 0x40	; 64
 6fa:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
 6fe:	04 e0       	ldi	r16, 0x04	; 4
 700:	10 e0       	ldi	r17, 0x00	; 0
	i2cwrite(data);
	i2cstop();
}

void ClearOLED()
{
 702:	68 94       	set
 704:	ee 24       	eor	r14, r14
 706:	e7 f8       	bld	r14, 7
 708:	f1 2c       	mov	r15, r1
 70a:	0b c0       	rjmp	.+22     	; 0x722 <ClearOLED+0x48>
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB вверху, MSB снизу
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
 712:	21 97       	sbiw	r28, 0x01	; 1
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
 714:	20 97       	sbiw	r28, 0x00	; 0
 716:	d1 f7       	brne	.-12     	; 0x70c <ClearOLED+0x32>
 718:	01 50       	subi	r16, 0x01	; 1
 71a:	11 09       	sbc	r17, r1
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
	
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	
	for(int kk = 0; kk < 4; kk++)
 71c:	01 15       	cp	r16, r1
 71e:	11 05       	cpc	r17, r1
 720:	19 f0       	breq	.+6      	; 0x728 <ClearOLED+0x4e>
	i2cwrite(data);
	i2cstop();
}

void ClearOLED()
{
 722:	ce 2d       	mov	r28, r14
 724:	df 2d       	mov	r29, r15
 726:	f2 cf       	rjmp	.-28     	; 0x70c <ClearOLED+0x32>
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB вверху, MSB снизу
		}
	}
	i2cstop();
 728:	0e 94 25 04 	call	0x84a	; 0x84a <i2cstop>
	oled_pointer = 0x00;
 72c:	10 92 60 00 	sts	0x0060, r1
	OLED_Command(SSD1306_DISPLAYON);
 730:	8f ea       	ldi	r24, 0xAF	; 175
 732:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_Command>
}
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	1f 91       	pop	r17
 73c:	0f 91       	pop	r16
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	08 95       	ret

00000744 <SelectDisplay>:

void SelectDisplay(int i)
{
	switch(i)
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	91 05       	cpc	r25, r1
 748:	69 f0       	breq	.+26     	; 0x764 <SelectDisplay+0x20>
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	91 05       	cpc	r25, r1
 74e:	19 f0       	breq	.+6      	; 0x756 <SelectDisplay+0x12>
 750:	89 2b       	or	r24, r25
 752:	51 f4       	brne	.+20     	; 0x768 <SelectDisplay+0x24>
 754:	04 c0       	rjmp	.+8      	; 0x75e <SelectDisplay+0x1a>
	{
		case 2:
		
			PORTB |= (PortB0 | PortB1);
 756:	88 b3       	in	r24, 0x18	; 24
 758:	83 60       	ori	r24, 0x03	; 3
 75a:	88 bb       	out	0x18, r24	; 24
			break; 
 75c:	08 95       	ret
		
		case 0:
		
			PORTB |= (PortB0);
 75e:	c0 9a       	sbi	0x18, 0	; 24
			PORTB &= ~(PortB1);
 760:	c1 98       	cbi	0x18, 1	; 24
			break;
 762:	08 95       	ret
		
		case 1:
		
			PORTB |= (PortB1);
 764:	c1 9a       	sbi	0x18, 1	; 24
			PORTB &= ~(PortB0);
 766:	c0 98       	cbi	0x18, 0	; 24
 768:	08 95       	ret

0000076a <SetOLED>:
	}

}

void SetOLED(uint8_t point, IMAGE_OLED a)
{
 76a:	ef 92       	push	r14
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
	//OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(point, 
			point + pgm_read_byte(&(serp_logo.long_image)), 
			0x04, 
			(0x04 + pgm_read_byte(&(serp_logo.height_image)))
 77a:	e6 e5       	ldi	r30, 0x56	; 86
 77c:	f2 e0       	ldi	r31, 0x02	; 2
 77e:	24 91       	lpm	r18, Z

void SetOLED(uint8_t point, IMAGE_OLED a)
{
	//OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(point, 
			point + pgm_read_byte(&(serp_logo.long_image)), 
 780:	e5 e5       	ldi	r30, 0x55	; 85
 782:	f2 e0       	ldi	r31, 0x02	; 2
 784:	64 91       	lpm	r22, Z
}

void SetOLED(uint8_t point, IMAGE_OLED a)
{
	//OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(point, 
 786:	2c 5f       	subi	r18, 0xFC	; 252
 788:	68 0f       	add	r22, r24
 78a:	44 e0       	ldi	r20, 0x04	; 4
 78c:	0e 94 34 03 	call	0x668	; 0x668 <SetPointOLED>
			point + pgm_read_byte(&(serp_logo.long_image)), 
			0x04, 
			(0x04 + pgm_read_byte(&(serp_logo.height_image)))
			);
	i2cstart(SSD1306_ADDR);
 790:	88 e7       	ldi	r24, 0x78	; 120
 792:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2cstart>
	i2cwrite(CODE_DATA);
 796:	80 e4       	ldi	r24, 0x40	; 64
 798:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
	for(int kk = 0; kk < pgm_read_byte(&(serp_logo.long_array)); kk++)
 79c:	0f 2e       	mov	r0, r31
 79e:	f4 e5       	ldi	r31, 0x54	; 84
 7a0:	ef 2e       	mov	r14, r31
 7a2:	f2 e0       	ldi	r31, 0x02	; 2
 7a4:	ff 2e       	mov	r15, r31
 7a6:	f0 2d       	mov	r31, r0
 7a8:	f7 01       	movw	r30, r14
 7aa:	84 91       	lpm	r24, Z
 7ac:	88 23       	and	r24, r24
 7ae:	81 f0       	breq	.+32     	; 0x7d0 <SetOLED+0x66>
 7b0:	00 e0       	ldi	r16, 0x00	; 0
 7b2:	10 e0       	ldi	r17, 0x00	; 0
 7b4:	f8 01       	movw	r30, r16
 7b6:	ec 5a       	subi	r30, 0xAC	; 172
 7b8:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		i2cwrite(pgm_read_byte(&(serp_logo.image[kk])));	//LSB вверху, MSB снизу
 7ba:	84 91       	lpm	r24, Z
 7bc:	0e 94 16 04 	call	0x82c	; 0x82c <i2cwrite>
			0x04, 
			(0x04 + pgm_read_byte(&(serp_logo.height_image)))
			);
	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	for(int kk = 0; kk < pgm_read_byte(&(serp_logo.long_array)); kk++)
 7c0:	0f 5f       	subi	r16, 0xFF	; 255
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	f7 01       	movw	r30, r14
 7c6:	84 91       	lpm	r24, Z
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	08 17       	cp	r16, r24
 7cc:	19 07       	cpc	r17, r25
 7ce:	94 f3       	brlt	.-28     	; 0x7b4 <SetOLED+0x4a>
	{
		i2cwrite(pgm_read_byte(&(serp_logo.image[kk])));	//LSB вверху, MSB снизу
	}
	i2cstop();
 7d0:	0e 94 25 04 	call	0x84a	; 0x84a <i2cstop>
	OLED_Command(SSD1306_DISPLAYON);
 7d4:	8f ea       	ldi	r24, 0xAF	; 175
 7d6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_Command>
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	08 95       	ret

000007e8 <i2cstart>:

uint8_t twi_status_register;

uint8_t i2cstart(uint8_t address)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 7e8:	94 ea       	ldi	r25, 0xA4	; 164
 7ea:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)))
 7ec:	06 b6       	in	r0, 0x36	; 54
 7ee:	07 fe       	sbrs	r0, 7
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <i2cstart+0x4>
		;

	twi_status_register = TW_STATUS & 0xF8;
 7f2:	91 b1       	in	r25, 0x01	; 1
 7f4:	98 7f       	andi	r25, 0xF8	; 248
 7f6:	90 93 61 00 	sts	0x0061, r25
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
 7fa:	98 30       	cpi	r25, 0x08	; 8
 7fc:	11 f0       	breq	.+4      	; 0x802 <i2cstart+0x1a>
 7fe:	90 31       	cpi	r25, 0x10	; 16
 800:	89 f4       	brne	.+34     	; 0x824 <i2cstart+0x3c>
	{
		return 1;
	}

	TWDR = address;
 802:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 804:	84 e8       	ldi	r24, 0x84	; 132
 806:	86 bf       	out	0x36, r24	; 54

	while(!(TWCR & (1<<TWINT)))
 808:	06 b6       	in	r0, 0x36	; 54
 80a:	07 fe       	sbrs	r0, 7
 80c:	fd cf       	rjmp	.-6      	; 0x808 <i2cstart+0x20>
		;

	twi_status_register = TW_STATUS & 0xF8;
 80e:	91 b1       	in	r25, 0x01	; 1
 810:	98 7f       	andi	r25, 0xF8	; 248
 812:	90 93 61 00 	sts	0x0061, r25
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
 816:	98 31       	cpi	r25, 0x18	; 24
 818:	39 f0       	breq	.+14     	; 0x828 <i2cstart+0x40>
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 34       	cpi	r25, 0x40	; 64
 81e:	29 f4       	brne	.+10     	; 0x82a <i2cstart+0x42>
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	08 95       	ret
		;

	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
	{
		return 1;
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	08 95       	ret
	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
	{
		return 1;
	}
	return 0;
 828:	80 e0       	ldi	r24, 0x00	; 0
}
 82a:	08 95       	ret

0000082c <i2cwrite>:

uint8_t i2cwrite(uint8_t data)
{
	TWDR = data;
 82c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 82e:	84 e8       	ldi	r24, 0x84	; 132
 830:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
 832:	06 b6       	in	r0, 0x36	; 54
 834:	07 fe       	sbrs	r0, 7
 836:	fd cf       	rjmp	.-6      	; 0x832 <i2cwrite+0x6>

	twi_status_register = TW_STATUS & 0xF8;
 838:	91 b1       	in	r25, 0x01	; 1
 83a:	98 7f       	andi	r25, 0xF8	; 248
 83c:	90 93 61 00 	sts	0x0061, r25
	if (twi_status_register != TW_MT_DATA_ACK)
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	98 32       	cpi	r25, 0x28	; 40
 844:	09 f4       	brne	.+2      	; 0x848 <i2cwrite+0x1c>
 846:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}	
}
 848:	08 95       	ret

0000084a <i2cstop>:

void i2cstop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 84a:	84 e9       	ldi	r24, 0x94	; 148
 84c:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
 84e:	06 b6       	in	r0, 0x36	; 54
 850:	04 fc       	sbrc	r0, 4
 852:	fd cf       	rjmp	.-6      	; 0x84e <i2cstop+0x4>
 854:	08 95       	ret

00000856 <init_ports>:
void init_ports()
{
    // Input/Output Ports initialization
    // Port A initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
 856:	1a ba       	out	0x1a, r1	; 26
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
 858:	1b ba       	out	0x1b, r1	; 27

    // Port B initialization
    // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
    DDRB = PortB7 | PortB6 | PortB5 | PortB4 | PortB3 | PortB2 | PortB1 | PortB0;
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	87 bb       	out	0x17, r24	; 23
    // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
    PORTB &= ~(PortB7 | PortB6 | PortB5 | PortB4 | PortB3 | PortB2 | PortB1 | PortB0);
 85e:	88 b3       	in	r24, 0x18	; 24
 860:	18 ba       	out	0x18, r1	; 24

    // Port C initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 862:	14 ba       	out	0x14, r1	; 20
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
 864:	15 ba       	out	0x15, r1	; 21

    // Port D initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 866:	11 ba       	out	0x11, r1	; 17
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
 868:	12 ba       	out	0x12, r1	; 18
 86a:	08 95       	ret

0000086c <main>:
void ssd1306_command(uint8_t data);

int main(void)
{

	init_ports();
 86c:	0e 94 2b 04 	call	0x856	; 0x856 <init_ports>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 870:	87 ea       	ldi	r24, 0xA7	; 167
 872:	91 e6       	ldi	r25, 0x61	; 97
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <main+0x8>
 878:	00 c0       	rjmp	.+0      	; 0x87a <main+0xe>
 87a:	00 00       	nop
	_delay_ms(100);
	
	
	InitLed();
 87c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <InitLed>
	ClearDisplay();
 880:	0e 94 89 02 	call	0x512	; 0x512 <ClearDisplay>
	//_delay_ms(1000);
	//WriteNum(NINE, EITHT, SEVEN);
	//_delay_ms(1000);
	//WriteNum(EMPTY, ZERO, ZERO);
	//_delay_ms(1000);
	WriteNum(G, P, S);
 884:	47 e5       	ldi	r20, 0x57	; 87
 886:	52 e0       	ldi	r21, 0x02	; 2
 888:	6f e5       	ldi	r22, 0x5F	; 95
 88a:	72 e0       	ldi	r23, 0x02	; 2
 88c:	87 e6       	ldi	r24, 0x67	; 103
 88e:	92 e0       	ldi	r25, 0x02	; 2
 890:	0e 94 98 02 	call	0x530	; 0x530 <WriteNum>
	
	
	//_delay_ms(1000);
	SetIntensity(0);
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SetIntensity>
	SelectDisplay(2);
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 a2 03 	call	0x744	; 0x744 <SelectDisplay>
	InitOLED();
 8a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <InitOLED>
	ClearOLED();
 8a6:	0e 94 6d 03 	call	0x6da	; 0x6da <ClearOLED>
	
	SelectDisplay(0);
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 a2 03 	call	0x744	; 0x744 <SelectDisplay>
 8b2:	9f e3       	ldi	r25, 0x3F	; 63
 8b4:	2d e0       	ldi	r18, 0x0D	; 13
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	20 40       	sbci	r18, 0x00	; 0
 8bc:	80 40       	sbci	r24, 0x00	; 0
 8be:	e1 f7       	brne	.-8      	; 0x8b8 <main+0x4c>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <main+0x56>
 8c2:	00 00       	nop
	_delay_ms(1000);
	SetOLED((uint8_t)0, serp_logo);
 8c4:	8d b7       	in	r24, 0x3d	; 61
 8c6:	9e b7       	in	r25, 0x3e	; 62
 8c8:	83 50       	subi	r24, 0x03	; 3
 8ca:	92 40       	sbci	r25, 0x02	; 2
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	9e bf       	out	0x3e, r25	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	8d bf       	out	0x3d, r24	; 61
 8d6:	ad b7       	in	r26, 0x3d	; 61
 8d8:	be b7       	in	r27, 0x3e	; 62
 8da:	11 96       	adiw	r26, 0x01	; 1
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	92 e0       	ldi	r25, 0x02	; 2
 8e0:	ef e6       	ldi	r30, 0x6F	; 111
 8e2:	f2 e0       	ldi	r31, 0x02	; 2
 8e4:	01 90       	ld	r0, Z+
 8e6:	0d 92       	st	X+, r0
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	e1 f7       	brne	.-8      	; 0x8e4 <main+0x78>
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	0e 94 b5 03 	call	0x76a	; 0x76a <SetOLED>
 8f2:	9f e3       	ldi	r25, 0x3F	; 63
 8f4:	2d e0       	ldi	r18, 0x0D	; 13
 8f6:	83 e0       	ldi	r24, 0x03	; 3
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	20 40       	sbci	r18, 0x00	; 0
 8fc:	80 40       	sbci	r24, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <main+0x8c>
 900:	00 c0       	rjmp	.+0      	; 0x902 <main+0x96>
 902:	00 00       	nop
	
	//SelectDisplay(1);
	//_delay_ms(1000);
	//SetOLED((uint8_t)0, bsuir_logo);
	_delay_ms(1000);
	SelectDisplay(2);
 904:	8d b7       	in	r24, 0x3d	; 61
 906:	9e b7       	in	r25, 0x3e	; 62
 908:	8d 5f       	subi	r24, 0xFD	; 253
 90a:	9d 4f       	sbci	r25, 0xFD	; 253
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	9e bf       	out	0x3e, r25	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	8d bf       	out	0x3d, r24	; 61
 916:	82 e0       	ldi	r24, 0x02	; 2
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 a2 03 	call	0x744	; 0x744 <SelectDisplay>
 91e:	ff cf       	rjmp	.-2      	; 0x91e <main+0xb2>

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
