
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000448  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000c0  008000c0  0000053c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac2  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d6  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000434  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3c       	cpi	r26, 0xC5	; 197
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 01 	call	0x394	; 0x394 <main>
  8a:	0c 94 22 02 	jmp	0x444	; 0x444 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2cstart>:
uint8_t twi_status_register;
void ssd1306_command(uint8_t data);

uint8_t i2cstart(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <i2cstart+0x4>

	twi_status_register = TW_STATUS & 0xF8;
  9c:	81 b1       	in	r24, 0x01	; 1
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	80 93 c4 00 	sts	0x00C4, r24
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	11 f0       	breq	.+4      	; 0xac <i2cstart+0x1a>
  a8:	80 31       	cpi	r24, 0x10	; 16
  aa:	91 f4       	brne	.+36     	; 0xd0 <i2cstart+0x3e>
	return 1;

	TWDR = I2CADDR;
  ac:	88 e7       	ldi	r24, 0x78	; 120
  ae:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  b0:	84 e8       	ldi	r24, 0x84	; 132
  b2:	86 bf       	out	0x36, r24	; 54

	while(!(TWCR & (1<<TWINT)));
  b4:	06 b6       	in	r0, 0x36	; 54
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <i2cstart+0x22>

	twi_status_register = TW_STATUS & 0xF8;
  ba:	91 b1       	in	r25, 0x01	; 1
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	90 93 c4 00 	sts	0x00C4, r25
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
  c2:	98 31       	cpi	r25, 0x18	; 24
  c4:	39 f0       	breq	.+14     	; 0xd4 <i2cstart+0x42>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 34       	cpi	r25, 0x40	; 64
  ca:	29 f4       	brne	.+10     	; 0xd6 <i2cstart+0x44>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));

	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
	return 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	08 95       	ret
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
	{
		return 1;
	}

	return 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
}
  d6:	08 95       	ret

000000d8 <i2cwrite>:

uint8_t i2cwrite(uint8_t data)
{
	TWDR = data;
  d8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	86 bf       	out	0x36, r24	; 54

	while(!(TWCR & (1<<TWINT)));
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <i2cwrite+0x6>

	twi_status_register = TW_STATUS & 0xF8;
  e4:	91 b1       	in	r25, 0x01	; 1
  e6:	98 7f       	andi	r25, 0xF8	; 248
  e8:	90 93 c4 00 	sts	0x00C4, r25
	if (twi_status_register != TW_MT_DATA_ACK)
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	98 32       	cpi	r25, 0x28	; 40
  f0:	09 f4       	brne	.+2      	; 0xf4 <i2cwrite+0x1c>
  f2:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
	else
	return 0;
}
  f4:	08 95       	ret

000000f6 <i2cstop>:

void i2cstop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  f6:	84 e9       	ldi	r24, 0x94	; 148
  f8:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	04 fc       	sbrc	r0, 4
  fe:	fd cf       	rjmp	.-6      	; 0xfa <i2cstop+0x4>
}
 100:	08 95       	ret

00000102 <InitLed>:


void InitLed()
{
	while(i < 4){
 102:	80 91 c1 00 	lds	r24, 0x00C1
 106:	90 91 c2 00 	lds	r25, 0x00C2
 10a:	04 97       	sbiw	r24, 0x04	; 4
 10c:	d0 f5       	brcc	.+116    	; 0x182 <InitLed+0x80>
	// инициализация дисплея
	PORTB &= ~(1<<PORTB4);
	SPDR = 0x0F;
 10e:	2f e0       	ldi	r18, 0x0F	; 15
	while(!(SPSR & (1<<SPIF)));
	PORTB |= (1<<PORTB4);


	PORTB &= ~(1<<PORTB4);
	SPDR = 0x0C;
 110:	ec e0       	ldi	r30, 0x0C	; 12
	while(!(SPSR & (1<<SPIF)));
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x01;
 112:	71 e0       	ldi	r23, 0x01	; 1
	while(!(SPSR & (1<<SPIF)));
	PORTB |= (1<<PORTB4);


	PORTB &= ~(1<<PORTB4);
	SPDR = 0x0A;
 114:	6a e0       	ldi	r22, 0x0A	; 10
	while(!(SPSR & (1<<SPIF)));
	PORTB |= (1<<PORTB4);


	PORTB &= ~(1<<PORTB4);
	SPDR = 0x0B;
 116:	5b e0       	ldi	r21, 0x0B	; 11
	while(!(SPSR & (1<<SPIF)));
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x07;
 118:	47 e0       	ldi	r20, 0x07	; 7
	while(!(SPSR & (1<<SPIF)));
	PORTB |= (1<<PORTB4);


	PORTB &= ~(1<<PORTB4);
	SPDR = 0x09;
 11a:	39 e0       	ldi	r19, 0x09	; 9

void InitLed()
{
	while(i < 4){
	// инициализация дисплея
	PORTB &= ~(1<<PORTB4);
 11c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = 0x0F;
 11e:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));
 120:	77 9b       	sbis	0x0e, 7	; 14
 122:	fe cf       	rjmp	.-4      	; 0x120 <InitLed+0x1e>
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x00;
 124:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)));
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <InitLed+0x24>
	PORTB |= (1<<PORTB4);
 12a:	c4 9a       	sbi	0x18, 4	; 24


	PORTB &= ~(1<<PORTB4);
 12c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = 0x0C;
 12e:	ef b9       	out	0x0f, r30	; 15
	while(!(SPSR & (1<<SPIF)));
 130:	77 9b       	sbis	0x0e, 7	; 14
 132:	fe cf       	rjmp	.-4      	; 0x130 <InitLed+0x2e>
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x01;
 134:	7f b9       	out	0x0f, r23	; 15
	while(!(SPSR & (1<<SPIF)));
 136:	77 9b       	sbis	0x0e, 7	; 14
 138:	fe cf       	rjmp	.-4      	; 0x136 <InitLed+0x34>
	PORTB |= (1<<PORTB4);
 13a:	c4 9a       	sbi	0x18, 4	; 24


	PORTB &= ~(1<<PORTB4);
 13c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = 0x0A;
 13e:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
 140:	77 9b       	sbis	0x0e, 7	; 14
 142:	fe cf       	rjmp	.-4      	; 0x140 <InitLed+0x3e>
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x0F;
 144:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <InitLed+0x44>
	PORTB |= (1<<PORTB4);
 14a:	c4 9a       	sbi	0x18, 4	; 24


	PORTB &= ~(1<<PORTB4);
 14c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = 0x0B;
 14e:	5f b9       	out	0x0f, r21	; 15
	while(!(SPSR & (1<<SPIF)));
 150:	77 9b       	sbis	0x0e, 7	; 14
 152:	fe cf       	rjmp	.-4      	; 0x150 <InitLed+0x4e>
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x07;
 154:	4f b9       	out	0x0f, r20	; 15
	while(!(SPSR & (1<<SPIF)));
 156:	77 9b       	sbis	0x0e, 7	; 14
 158:	fe cf       	rjmp	.-4      	; 0x156 <InitLed+0x54>
	PORTB |= (1<<PORTB4);
 15a:	c4 9a       	sbi	0x18, 4	; 24


	PORTB &= ~(1<<PORTB4);
 15c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = 0x09;
 15e:	3f b9       	out	0x0f, r19	; 15
	while(!(SPSR & (1<<SPIF)));
 160:	77 9b       	sbis	0x0e, 7	; 14
 162:	fe cf       	rjmp	.-4      	; 0x160 <InitLed+0x5e>
	//PORTB |= (1<<PORTB4); //высокий уровень
	//_delay_ms(50);

	//PORTB &= ~(1<<PORTB4); //низкий уровень
	SPDR = 0x00;
 164:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)));
 166:	77 9b       	sbis	0x0e, 7	; 14
 168:	fe cf       	rjmp	.-4      	; 0x166 <InitLed+0x64>
	PORTB |= (1<<PORTB4);
 16a:	c4 9a       	sbi	0x18, 4	; 24
	
	i++;
 16c:	80 91 c1 00 	lds	r24, 0x00C1
 170:	90 91 c2 00 	lds	r25, 0x00C2
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 c2 00 	sts	0x00C2, r25
 17a:	80 93 c1 00 	sts	0x00C1, r24
}


void InitLed()
{
	while(i < 4){
 17e:	04 97       	sbiw	r24, 0x04	; 4
 180:	68 f2       	brcs	.-102    	; 0x11c <InitLed+0x1a>
 182:	08 95       	ret

00000184 <SPI_WriteStartByte>:
	}
}

void SPI_WriteStartByte(char data)
{
	PORTB &= ~(1<<PORTB4);
 184:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data;
 186:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 188:	77 9b       	sbis	0x0e, 7	; 14
 18a:	fe cf       	rjmp	.-4      	; 0x188 <SPI_WriteStartByte+0x4>
}
 18c:	08 95       	ret

0000018e <SPI_WriteEndByte>:

void SPI_WriteEndByte(char data)
{
	SPDR = data;
 18e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 190:	77 9b       	sbis	0x0e, 7	; 14
 192:	fe cf       	rjmp	.-4      	; 0x190 <SPI_WriteEndByte+0x2>
	PORTB |= (1<<PORTB4);
 194:	c4 9a       	sbi	0x18, 4	; 24
 196:	08 95       	ret

00000198 <SPI_WriteByte>:
}

void SPI_WriteByte(char data)
{
	SPDR = data;
 198:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 19a:	77 9b       	sbis	0x0e, 7	; 14
 19c:	fe cf       	rjmp	.-4      	; 0x19a <SPI_WriteByte+0x2>
}
 19e:	08 95       	ret

000001a0 <SendLed>:

void SendLed(char adr, char data)
{
 1a0:	cf 93       	push	r28
 1a2:	c6 2f       	mov	r28, r22
	SPI_WriteStartByte(adr);
 1a4:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_WriteStartByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	9e e4       	ldi	r25, 0x4E	; 78
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <SendLed+0xc>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <SendLed+0x12>
 1b2:	00 00       	nop
	_delay_ms(10);
	SPI_WriteEndByte(data);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_WriteEndByte>
 1ba:	8f e1       	ldi	r24, 0x1F	; 31
 1bc:	9e e4       	ldi	r25, 0x4E	; 78
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <SendLed+0x1e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <SendLed+0x24>
 1c4:	00 00       	nop
	_delay_ms(10);
}
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <ClearDisplay>:

void ClearDisplay()
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	c4 e0       	ldi	r28, 0x04	; 4
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
 1d6:	01 e0       	ldi	r16, 0x01	; 1
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <ClearDisplay+0x30>
	int i = 0;
    while(i <= 3)
    {
		for(char j = 1; j <= 8; j++)
		{
			SendLed(j,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 2f       	mov	r24, r17
 1de:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SendLed>
void ClearDisplay()
{
	int i = 0;
    while(i <= 3)
    {
		for(char j = 1; j <= 8; j++)
 1e2:	1f 5f       	subi	r17, 0xFF	; 255
 1e4:	19 30       	cpi	r17, 0x09	; 9
 1e6:	c9 f7       	brne	.-14     	; 0x1da <ClearDisplay+0x10>
 1e8:	8f ec       	ldi	r24, 0xCF	; 207
 1ea:	97 e0       	ldi	r25, 0x07	; 7
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <ClearDisplay+0x22>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <ClearDisplay+0x28>
 1f2:	00 00       	nop
 1f4:	21 97       	sbiw	r28, 0x01	; 1
}

void ClearDisplay()
{
	int i = 0;
    while(i <= 3)
 1f6:	20 97       	sbiw	r28, 0x00	; 0
 1f8:	11 f0       	breq	.+4      	; 0x1fe <ClearDisplay+0x34>
	SPI_WriteEndByte(data);
	_delay_ms(10);
}

void ClearDisplay()
{
 1fa:	10 2f       	mov	r17, r16
 1fc:	ee cf       	rjmp	.-36     	; 0x1da <ClearDisplay+0x10>
			SendLed(j,0);
		}
	    i++;
	    _delay_ms(1);
    }
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <ssd1306_command>:
	//if(i == 18) return;
	//}
}	

void ssd1306_command(uint8_t data)
{
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
	i2cstart();
 20c:	0e 94 49 00 	call	0x92	; 0x92 <i2cstart>
	i2cwrite(0x00);      // Co = 0, D/C = 0
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
	i2cwrite(data);
 216:	8c 2f       	mov	r24, r28
 218:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
	i2cstop();
 21c:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2cstop>
	//return;
	//
///*Stop bit*/
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	//while(TWCR & (1<<TWSTO));
}
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <InitI2C>:
}
	
void InitI2C()
{
	//int i = 0;
	TWBR = TWBR_VALUE;
 224:	88 e4       	ldi	r24, 0x48	; 72
 226:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
 228:	11 b8       	out	0x01, r1	; 1
	//while(1)
	//{
		//ssd1306_command(init[i]);
		//i++;
	//
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 22a:	8e ea       	ldi	r24, 0xAE	; 174
 22c:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 230:	85 ed       	ldi	r24, 0xD5	; 213
 232:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(0x80);                                  // the suggested ratio 0x80
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 23c:	88 ea       	ldi	r24, 0xA8	; 168
 23e:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 248:	83 ed       	ldi	r24, 0xD3	; 211
 24a:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 25a:	8d e8       	ldi	r24, 0x8D	; 141
 25c:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	if (0x2 == SSD1306_EXTERNALVCC)
	{ ssd1306_command(0x10); }
	else
	{ ssd1306_command(0x14); }
 260:	84 e1       	ldi	r24, 0x14	; 20
 262:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
 272:	81 ea       	ldi	r24, 0xA1	; 161
 274:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);
 278:	88 ec       	ldi	r24, 0xC8	; 200
 27a:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>

	
		ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 27e:	8a ed       	ldi	r24, 0xDA	; 218
 280:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
		ssd1306_command(0x02);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
		ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 28a:	81 e8       	ldi	r24, 0x81	; 129
 28c:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
		ssd1306_command(0x8F);
 290:	8f e8       	ldi	r24, 0x8F	; 143
 292:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	
	
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 296:	89 ed       	ldi	r24, 0xD9	; 217
 298:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	if (0x2 == SSD1306_EXTERNALVCC)
	{ ssd1306_command(0x22); }
	else
	{ ssd1306_command(0xF1); }
 29c:	81 ef       	ldi	r24, 0xF1	; 241
 29e:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 2a2:	8b ed       	ldi	r24, 0xDB	; 219
 2a4:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(0x40);
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 2ae:	84 ea       	ldi	r24, 0xA4	; 164
 2b0:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 2b4:	86 ea       	ldi	r24, 0xA6	; 166
 2b6:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 2ba:	8e e2       	ldi	r24, 0x2E	; 46
 2bc:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 2c0:	8f ea       	ldi	r24, 0xAF	; 175
 2c2:	0e 94 04 01 	call	0x208	; 0x208 <ssd1306_command>
 2c6:	08 95       	ret

000002c8 <ClearOLED>:
///*Stop bit*/
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	//while(TWCR & (1<<TWSTO));
}
void ClearOLED()
{
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	i2cstart();
 2d4:	0e 94 49 00 	call	0x92	; 0x92 <i2cstart>
	i2cwrite(0b10000000);
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
	i2cwrite(0x20);
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
	i2cwrite(0b10000000);
 2e4:	80 e8       	ldi	r24, 0x80	; 128
 2e6:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
	i2cwrite(0x00);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
	i2cwrite(0b01000000);
 2f0:	80 e4       	ldi	r24, 0x40	; 64
 2f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
 2f6:	08 e0       	ldi	r16, 0x08	; 8
 2f8:	10 e0       	ldi	r17, 0x00	; 0
///*Stop bit*/
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	//while(TWCR & (1<<TWSTO));
}
void ClearOLED()
{
 2fa:	68 94       	set
 2fc:	ee 24       	eor	r14, r14
 2fe:	e7 f8       	bld	r14, 7
 300:	f1 2c       	mov	r15, r1
 302:	0b c0       	rjmp	.+22     	; 0x31a <ClearOLED+0x52>
	i2cwrite(0b01000000);
	
	for(int kk = 0; kk < 8; kk++)
	{
		for(int k = 0; k < 128; k++)
			i2cwrite(0x00);	//LSB вверху, MSB снизу
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cwrite>
 30a:	21 97       	sbiw	r28, 0x01	; 1
	i2cwrite(0x00);
	i2cwrite(0b01000000);
	
	for(int kk = 0; kk < 8; kk++)
	{
		for(int k = 0; k < 128; k++)
 30c:	20 97       	sbiw	r28, 0x00	; 0
 30e:	d1 f7       	brne	.-12     	; 0x304 <ClearOLED+0x3c>
 310:	01 50       	subi	r16, 0x01	; 1
 312:	11 09       	sbc	r17, r1
	i2cwrite(0x20);
	i2cwrite(0b10000000);
	i2cwrite(0x00);
	i2cwrite(0b01000000);
	
	for(int kk = 0; kk < 8; kk++)
 314:	01 15       	cp	r16, r1
 316:	11 05       	cpc	r17, r1
 318:	19 f0       	breq	.+6      	; 0x320 <ClearOLED+0x58>
///*Stop bit*/
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	//while(TWCR & (1<<TWSTO));
}
void ClearOLED()
{
 31a:	ce 2d       	mov	r28, r14
 31c:	df 2d       	mov	r29, r15
 31e:	f2 cf       	rjmp	.-28     	; 0x304 <ClearOLED+0x3c>
	for(int kk = 0; kk < 8; kk++)
	{
		for(int k = 0; k < 128; k++)
			i2cwrite(0x00);	//LSB вверху, MSB снизу
	}
	i2cstop();
 320:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2cstop>
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <WriteNum>:

void WriteNum(char *x, char *y, char *z)
{
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	7a 01       	movw	r14, r20
 342:	c6 2f       	mov	r28, r22
 344:	d7 2f       	mov	r29, r23
 346:	8c 01       	movw	r16, r24
 348:	dd 24       	eor	r13, r13
 34a:	d3 94       	inc	r13
	
	for(int i = 0; i < 8; i++)
	{
		PORTB &= ~(1 << PORTB4);
 34c:	c4 98       	cbi	0x18, 4	; 24
		
		SPI_WriteByte(i + 1);
 34e:	8d 2d       	mov	r24, r13
 350:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_WriteByte>
		SPI_WriteByte(z[i]);
 354:	f7 01       	movw	r30, r14
 356:	81 91       	ld	r24, Z+
 358:	7f 01       	movw	r14, r30
 35a:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_WriteByte>
		
		SPI_WriteByte(i + 1);
 35e:	8d 2d       	mov	r24, r13
 360:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_WriteByte>
		SPI_WriteByte(y[i]);
 364:	89 91       	ld	r24, Y+
 366:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_WriteByte>
		
		SPI_WriteByte(i + 1);
 36a:	8d 2d       	mov	r24, r13
 36c:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_WriteByte>
		SPI_WriteByte(x[i]);
 370:	f8 01       	movw	r30, r16
 372:	81 91       	ld	r24, Z+
 374:	8f 01       	movw	r16, r30
 376:	0e 94 cc 00 	call	0x198	; 0x198 <SPI_WriteByte>
		
		PORTB |= (1<<PORTB4);
 37a:	c4 9a       	sbi	0x18, 4	; 24
 37c:	d3 94       	inc	r13
}

void WriteNum(char *x, char *y, char *z)
{
	
	for(int i = 0; i < 8; i++)
 37e:	f9 e0       	ldi	r31, 0x09	; 9
 380:	df 12       	cpse	r13, r31
 382:	e4 cf       	rjmp	.-56     	; 0x34c <WriteNum+0x1a>
		SPI_WriteByte(x[i]);
		
		PORTB |= (1<<PORTB4);
	}
	
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	08 95       	ret

00000394 <main>:

int main(void)
{
	DDRB |= ((1<<PORTB0)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //ножки SPI на выход
 394:	87 b3       	in	r24, 0x17	; 23
 396:	89 6b       	ori	r24, 0xB9	; 185
 398:	87 bb       	out	0x17, r24	; 23
	
	PORTB &= ~((1<<PORTB0)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //низкий уровень
 39a:	88 b3       	in	r24, 0x18	; 24
 39c:	86 74       	andi	r24, 0x46	; 70
 39e:	88 bb       	out	0x18, r24	; 24
	
	
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 3a0:	80 e5       	ldi	r24, 0x50	; 80
 3a2:	8d b9       	out	0x0d, r24	; 13
	SPSR=(0<<SPI2X);
 3a4:	1e b8       	out	0x0e, r1	; 14
	
	InitLed();
 3a6:	0e 94 81 00 	call	0x102	; 0x102 <InitLed>
	//InitI2C();
	ClearDisplay();
 3aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ClearDisplay>
	//PORTB |= (1<<PORTB3);
	//SendLed(4, 1);
	WriteNum(ONE, TWO, THREE);
 3ae:	48 ea       	ldi	r20, 0xA8	; 168
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	60 eb       	ldi	r22, 0xB0	; 176
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	88 eb       	ldi	r24, 0xB8	; 184
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 99 01 	call	0x332	; 0x332 <WriteNum>
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	89 e6       	ldi	r24, 0x69	; 105
 3c2:	98 e1       	ldi	r25, 0x18	; 24
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x30>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x3a>
 3ce:	00 00       	nop
	_delay_ms(1000);
	WriteNum(FOUR, FIVE, SIX);
 3d0:	40 e9       	ldi	r20, 0x90	; 144
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	68 e9       	ldi	r22, 0x98	; 152
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 ea       	ldi	r24, 0xA0	; 160
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 99 01 	call	0x332	; 0x332 <WriteNum>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	89 e6       	ldi	r24, 0x69	; 105
 3e4:	98 e1       	ldi	r25, 0x18	; 24
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x52>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x5c>
 3f0:	00 00       	nop
	_delay_ms(1000);
	WriteNum(SEVEN, EITHT, NINE);
 3f2:	48 e7       	ldi	r20, 0x78	; 120
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 e8       	ldi	r22, 0x80	; 128
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	88 e8       	ldi	r24, 0x88	; 136
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 99 01 	call	0x332	; 0x332 <WriteNum>
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	89 e6       	ldi	r24, 0x69	; 105
 406:	98 e1       	ldi	r25, 0x18	; 24
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <main+0x74>
 410:	00 c0       	rjmp	.+0      	; 0x412 <main+0x7e>
 412:	00 00       	nop
	_delay_ms(1000);
	WriteNum(Z, Y, X);
 414:	40 e6       	ldi	r20, 0x60	; 96
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	68 e6       	ldi	r22, 0x68	; 104
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e7       	ldi	r24, 0x70	; 112
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 99 01 	call	0x332	; 0x332 <WriteNum>
	
	InitI2C();
 424:	0e 94 12 01 	call	0x224	; 0x224 <InitI2C>
	PORTB |= (1<<PORTB3);
 428:	c3 9a       	sbi	0x18, 3	; 24
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	89 e6       	ldi	r24, 0x69	; 105
 42e:	98 e1       	ldi	r25, 0x18	; 24
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <main+0x9c>
 438:	00 c0       	rjmp	.+0      	; 0x43a <main+0xa6>
 43a:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<PORTB3);
 43c:	c3 98       	cbi	0x18, 3	; 24
	ClearOLED();
 43e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ClearOLED>
 442:	ff cf       	rjmp	.-2      	; 0x442 <main+0xae>

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
