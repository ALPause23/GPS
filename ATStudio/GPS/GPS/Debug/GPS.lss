
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000348  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d0  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000024e  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  00000920  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ae  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c4  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5d 00 	call	0xba	; 0xba <main>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitI2C>:
uint16_t i;
uint8_t a,b;

void InitLed()
{
	while(i < 4){
  7c:	88 e4       	ldi	r24, 0x48	; 72
  7e:	80 b9       	out	0x00, r24	; 0
  80:	11 b8       	out	0x01, r1	; 1
}
	
void InitI2C()
{
	TWBR = TWBR_VALUE;
	TWSR = 0;
  82:	08 95       	ret

00000084 <SendOLED>:
}	

void SendOLED(uint8_t adr, uint8_t data)
{
	// START bit
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  84:	94 ea       	ldi	r25, 0xA4	; 164
  86:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)));
  88:	06 b6       	in	r0, 0x36	; 54
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <SendOLED+0x4>
	
	/*выдаем на шину пакет SLA-W, ACK == 0*/
	TWDR = (0b01111010)|0;
  8e:	9a e7       	ldi	r25, 0x7A	; 122
  90:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  92:	94 e8       	ldi	r25, 0x84	; 132
  94:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)));
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <SendOLED+0x12>
	
	TWDR = adr;
  9c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <SendOLED+0x1e>
		TWDR = data;
  a8:	63 b9       	out	0x03, r22	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	86 bf       	out	0x36, r24	; 54
		while(!(TWCR & (1<<TWINT)));
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <SendOLED+0x2a>
	
	/*Stop bit*/
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  b4:	84 e9       	ldi	r24, 0x94	; 148
  b6:	86 bf       	out	0x36, r24	; 54
  b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
	DDRB |= ((1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //ножки SPI на выход
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	88 6b       	ori	r24, 0xB8	; 184
  be:	87 bb       	out	0x17, r24	; 23
	
	PORTB &= ~((1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //низкий уровень
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	87 74       	andi	r24, 0x47	; 71
  c4:	88 bb       	out	0x18, r24	; 24
	
	
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
  c6:	80 e5       	ldi	r24, 0x50	; 80
  c8:	8d b9       	out	0x0d, r24	; 13
	SPSR=(0<<SPI2X);
  ca:	1e b8       	out	0x0e, r1	; 14
	//SendLed(4, 3);
	//PORTB &= ~(1<<PORTB3);
	//SendLed(1, 1);
	//SendLed(2, 1);
	
	InitI2C();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <InitI2C>
	//SendOLED(0xA8, 0x3F);
	SendOLED(0x00, 0xAF);
  d0:	6f ea       	ldi	r22, 0xAF	; 175
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 42 00 	call	0x84	; 0x84 <SendOLED>
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x1e>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
