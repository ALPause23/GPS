
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000e0  008000e0  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009de  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c1  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000219  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000349  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  8a:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitOLED>:
ï»¿#include "OLED.h"

void InitOLED()
{
	TWBR = TWBR_VALUE;
  92:	88 e4       	ldi	r24, 0x48	; 72
  94:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
  96:	11 b8       	out	0x01, r1	; 1
	i2cstart(SSD1306_ADDR);
  98:	88 e7       	ldi	r24, 0x78	; 120
  9a:	0e 94 30 01 	call	0x260	; 0x260 <i2cstart>
	i2cwrite(0x00);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	
	i2cwrite(SSD1306_DISPLAYOFF);                    // 0xAE
  a4:	8e ea       	ldi	r24, 0xAE	; 174
  a6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
  aa:	85 ed       	ldi	r24, 0xD5	; 213
  ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(0x80);                                  // the suggested ratio 0x80
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>

	i2cwrite(SSD1306_SETMULTIPLEX);                  // 0xA8
  b6:	88 ea       	ldi	r24, 0xA8	; 168
  b8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_LCDHEIGHT - 1);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>

	i2cwrite(SSD1306_SETDISPLAYOFFSET);              // 0xD3
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(0x0);                                   // no offset
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_SETSTARTLINE | 0x0);            // line #0
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_CHARGEPUMP);                    // 0x8D
  d4:	8d e8       	ldi	r24, 0x8D	; 141
  d6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	{
		i2cwrite(0x10);
	}
	else
	{
		i2cwrite(0x14);
  da:	84 e1       	ldi	r24, 0x14	; 20
  dc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	}
	i2cwrite(0x20);             					   // 0x20  SSD1306_MEMORYMODE
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(0x00);                       	       // 0x0 act like ks0108
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_SEGREMAP | 0x1);
  ec:	81 ea       	ldi	r24, 0xA1	; 161
  ee:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_COMSCANDEC);
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	
	i2cwrite(SSD1306_SETCOMPINS);                    // 0xDA
  f8:	8a ed       	ldi	r24, 0xDA	; 218
  fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(0x02);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_SETCONTRAST);                   // 0x81
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(0x8F);
 10a:	8f e8       	ldi	r24, 0x8F	; 143
 10c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	
	i2cwrite(SSD1306_SETPRECHARGE);                  // 0xd9
 110:	89 ed       	ldi	r24, 0xD9	; 217
 112:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	{
		i2cwrite(0x22);
	}
	else
	{
		i2cwrite(0xF1);
 116:	81 ef       	ldi	r24, 0xF1	; 241
 118:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	}
	i2cwrite(SSD1306_SETVCOMDETECT);                 // 0xDB
 11c:	8b ed       	ldi	r24, 0xDB	; 219
 11e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(0x40);
 122:	80 e4       	ldi	r24, 0x40	; 64
 124:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 128:	84 ea       	ldi	r24, 0xA4	; 164
 12a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_NORMALDISPLAY);                 // 0xA6
 12e:	86 ea       	ldi	r24, 0xA6	; 166
 130:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>

	i2cwrite(SSD1306_DEACTIVATE_SCROLL);
 134:	8e e2       	ldi	r24, 0x2E	; 46
 136:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>

	i2cwrite(SSD1306_DISPLAYON);//--turn on oled panel
 13a:	8f ea       	ldi	r24, 0xAF	; 175
 13c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cstop();
 140:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2cstop>
 144:	08 95       	ret

00000146 <SetPointOLED>:
}
void SetPointOLED(uint8_t Start_Collumn, uint8_t End_Collumn, uint8_t Start_Page, uint8_t End_Page)
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	08 2f       	mov	r16, r24
 150:	16 2f       	mov	r17, r22
 152:	d4 2f       	mov	r29, r20
 154:	c2 2f       	mov	r28, r18
	i2cstart(SSD1306_ADDR);
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	0e 94 30 01 	call	0x260	; 0x260 <i2cstart>
	i2cwrite(CODE_COMMAND);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_COLUMNADDR);
 162:	81 e2       	ldi	r24, 0x21	; 33
 164:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(Start_Collumn);
 168:	80 2f       	mov	r24, r16
 16a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(End_Collumn);
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	
	i2cwrite(CODE_COMMAND);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(SSD1306_PAGEADDR);
 17a:	82 e2       	ldi	r24, 0x22	; 34
 17c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(Start_Page);
 180:	8d 2f       	mov	r24, r29
 182:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(End_Page);
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cstop();
 18c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2cstop>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <OLED_Command>:
void OLED_Command(uint8_t data)
{
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
	i2cstart(SSD1306_ADDR);
 19e:	88 e7       	ldi	r24, 0x78	; 120
 1a0:	0e 94 30 01 	call	0x260	; 0x260 <i2cstart>
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cwrite(data);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	i2cstop();
 1b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2cstop>
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <ClearOLED>:
void ClearOLED()
{
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
 1c4:	27 e0       	ldi	r18, 0x07	; 7
 1c6:	44 e0       	ldi	r20, 0x04	; 4
 1c8:	6f e7       	ldi	r22, 0x7F	; 127
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 a3 00 	call	0x146	; 0x146 <SetPointOLED>
	
	i2cstart(SSD1306_ADDR);
 1d0:	88 e7       	ldi	r24, 0x78	; 120
 1d2:	0e 94 30 01 	call	0x260	; 0x260 <i2cstart>
	i2cwrite(0x40);
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
 1dc:	04 e0       	ldi	r16, 0x04	; 4
 1de:	10 e0       	ldi	r17, 0x00	; 0
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
	i2cwrite(data);
	i2cstop();
}
void ClearOLED()
{
 1e0:	68 94       	set
 1e2:	ee 24       	eor	r14, r14
 1e4:	e7 f8       	bld	r14, 7
 1e6:	f1 2c       	mov	r15, r1
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <ClearOLED+0x48>
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB Ð²Ð²ÐµÑÑÑ, MSB ÑÐ½Ð¸Ð·Ñ
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
 1f0:	21 97       	sbiw	r28, 0x01	; 1
	i2cstart(SSD1306_ADDR);
	i2cwrite(0x40);
	
	for(int kk = 0; kk < 4; kk++)
	{
		for(int k = 0; k < 128; k++)
 1f2:	20 97       	sbiw	r28, 0x00	; 0
 1f4:	d1 f7       	brne	.-12     	; 0x1ea <ClearOLED+0x32>
 1f6:	01 50       	subi	r16, 0x01	; 1
 1f8:	11 09       	sbc	r17, r1
	SetPointOLED(0x00, 0x7F, 0x04, 0x07);
	
	i2cstart(SSD1306_ADDR);
	i2cwrite(0x40);
	
	for(int kk = 0; kk < 4; kk++)
 1fa:	01 15       	cp	r16, r1
 1fc:	11 05       	cpc	r17, r1
 1fe:	19 f0       	breq	.+6      	; 0x206 <ClearOLED+0x4e>
	i2cwrite(CODE_COMMAND);      // Co = 0, D/C = 0
	i2cwrite(data);
	i2cstop();
}
void ClearOLED()
{
 200:	ce 2d       	mov	r28, r14
 202:	df 2d       	mov	r29, r15
 204:	f2 cf       	rjmp	.-28     	; 0x1ea <ClearOLED+0x32>
		for(int k = 0; k < 128; k++)
		{
			i2cwrite(0x00);	//LSB Ð²Ð²ÐµÑÑÑ, MSB ÑÐ½Ð¸Ð·Ñ
		}
	}
	i2cstop();
 206:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2cstop>
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <SetOLED>:

void SetOLED(void)
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	OLED_Command(SSD1306_DISPLAYOFF);
 220:	8e ea       	ldi	r24, 0xAE	; 174
 222:	0e 94 cd 00 	call	0x19a	; 0x19a <OLED_Command>
	SetPointOLED(0x00, 0x1F, 0x04, 0x07);
 226:	27 e0       	ldi	r18, 0x07	; 7
 228:	44 e0       	ldi	r20, 0x04	; 4
 22a:	6f e1       	ldi	r22, 0x1F	; 31
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 a3 00 	call	0x146	; 0x146 <SetPointOLED>

	i2cstart(SSD1306_ADDR);
 232:	88 e7       	ldi	r24, 0x78	; 120
 234:	0e 94 30 01 	call	0x260	; 0x260 <i2cstart>
	i2cwrite(CODE_DATA);
 238:	80 e4       	ldi	r24, 0x40	; 64
 23a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
 23e:	c0 e6       	ldi	r28, 0x60	; 96
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	00 ee       	ldi	r16, 0xE0	; 224
 244:	10 e0       	ldi	r17, 0x00	; 0
	for(int kk = 0; kk < 128; kk++)
	{
		i2cwrite(serp[kk]);	//LSB Ð²Ð²ÐµÑÑÑ, MSB ÑÐ½Ð¸Ð·Ñ
 246:	89 91       	ld	r24, Y+
 248:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2cwrite>
	OLED_Command(SSD1306_DISPLAYOFF);
	SetPointOLED(0x00, 0x1F, 0x04, 0x07);

	i2cstart(SSD1306_ADDR);
	i2cwrite(CODE_DATA);
	for(int kk = 0; kk < 128; kk++)
 24c:	c0 17       	cp	r28, r16
 24e:	d1 07       	cpc	r29, r17
 250:	d1 f7       	brne	.-12     	; 0x246 <SetOLED+0x2e>
	{
		i2cwrite(serp[kk]);	//LSB Ð²Ð²ÐµÑÑÑ, MSB ÑÐ½Ð¸Ð·Ñ
	}
	i2cstop();
 252:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2cstop>
	//
	//i2cwrite(AVRlogo[kk]);	//LSB Ð²Ð²ÐµÑÑÑ, MSB ÑÐ½Ð¸Ð·Ñ
	//}
	//i2cstop();
	
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <i2cstart>:

uint8_t twi_status_register;

uint8_t i2cstart(uint8_t address)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 260:	94 ea       	ldi	r25, 0xA4	; 164
 262:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)))
 264:	06 b6       	in	r0, 0x36	; 54
 266:	07 fe       	sbrs	r0, 7
 268:	fd cf       	rjmp	.-6      	; 0x264 <i2cstart+0x4>
		;

	twi_status_register = TW_STATUS & 0xF8;
 26a:	91 b1       	in	r25, 0x01	; 1
 26c:	98 7f       	andi	r25, 0xF8	; 248
 26e:	90 93 e0 00 	sts	0x00E0, r25
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
 272:	98 30       	cpi	r25, 0x08	; 8
 274:	11 f0       	breq	.+4      	; 0x27a <i2cstart+0x1a>
 276:	90 31       	cpi	r25, 0x10	; 16
 278:	89 f4       	brne	.+34     	; 0x29c <i2cstart+0x3c>
	{
		return 1;
	}

	TWDR = address;
 27a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 27c:	84 e8       	ldi	r24, 0x84	; 132
 27e:	86 bf       	out	0x36, r24	; 54

	while(!(TWCR & (1<<TWINT)))
 280:	06 b6       	in	r0, 0x36	; 54
 282:	07 fe       	sbrs	r0, 7
 284:	fd cf       	rjmp	.-6      	; 0x280 <i2cstart+0x20>
		;

	twi_status_register = TW_STATUS & 0xF8;
 286:	91 b1       	in	r25, 0x01	; 1
 288:	98 7f       	andi	r25, 0xF8	; 248
 28a:	90 93 e0 00 	sts	0x00E0, r25
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
 28e:	98 31       	cpi	r25, 0x18	; 24
 290:	39 f0       	breq	.+14     	; 0x2a0 <i2cstart+0x40>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 34       	cpi	r25, 0x40	; 64
 296:	29 f4       	brne	.+10     	; 0x2a2 <i2cstart+0x42>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
		;

	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
	{
		return 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	08 95       	ret
	twi_status_register = TW_STATUS & 0xF8;
	if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
	{
		return 1;
	}
	return 0;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
}
 2a2:	08 95       	ret

000002a4 <i2cwrite>:

uint8_t i2cwrite(uint8_t data)
{
	TWDR = data;
 2a4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a6:	84 e8       	ldi	r24, 0x84	; 132
 2a8:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
 2aa:	06 b6       	in	r0, 0x36	; 54
 2ac:	07 fe       	sbrs	r0, 7
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <i2cwrite+0x6>

	twi_status_register = TW_STATUS & 0xF8;
 2b0:	91 b1       	in	r25, 0x01	; 1
 2b2:	98 7f       	andi	r25, 0xF8	; 248
 2b4:	90 93 e0 00 	sts	0x00E0, r25
	if (twi_status_register != TW_MT_DATA_ACK)
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	98 32       	cpi	r25, 0x28	; 40
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <i2cwrite+0x1c>
 2be:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}	
}
 2c0:	08 95       	ret

000002c2 <i2cstop>:

void i2cstop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2c2:	84 e9       	ldi	r24, 0x94	; 148
 2c4:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
 2c6:	06 b6       	in	r0, 0x36	; 54
 2c8:	04 fc       	sbrc	r0, 4
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <i2cstop+0x4>
 2cc:	08 95       	ret

000002ce <main>:



int main(void)
{
	DDRB |= ((1<<PORTB0)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //Ð½Ð¾Ð¶ÐºÐ¸ SPI Ð½Ð° Ð²ÑÑÐ¾Ð´
 2ce:	87 b3       	in	r24, 0x17	; 23
 2d0:	89 6b       	ori	r24, 0xB9	; 185
 2d2:	87 bb       	out	0x17, r24	; 23
	//PORTA |= PortA0;
	PORTB |= ((1<<PORTB0)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5)|(1<<PORTB7)); //Ð½Ð¸Ð·ÐºÐ¸Ð¹ ÑÑÐ¾Ð²ÐµÐ½Ñ
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	89 6b       	ori	r24, 0xB9	; 185
 2d8:	88 bb       	out	0x18, r24	; 24
	//
	//WriteNum(NINE, EITHT, SEVEN);
	//_delay_ms(100);
	//WriteNum(Z, Y, X);
	
	PORTB |= (1<<PORTB4);
 2da:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB3);
 2dc:	c3 98       	cbi	0x18, 3	; 24
	
	//_delay_ms(10);
	InitOLED();
 2de:	0e 94 49 00 	call	0x92	; 0x92 <InitOLED>
	PORTB |= (1<<PORTB3);
 2e2:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<PORTB4);
 2e4:	c4 98       	cbi	0x18, 4	; 24
	InitOLED();
 2e6:	0e 94 49 00 	call	0x92	; 0x92 <InitOLED>
	PORTB |= (1<<PORTB4);
 2ea:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB3);
 2ec:	c3 98       	cbi	0x18, 3	; 24
	ClearOLED();
 2ee:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ClearOLED>
	PORTB |= (1<<PORTB3);
 2f2:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<PORTB4);
 2f4:	c4 98       	cbi	0x18, 4	; 24
	ClearOLED();
 2f6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ClearOLED>
	PORTB |= (1<<PORTB4);
 2fa:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<PORTB3);
 2fc:	c3 98       	cbi	0x18, 3	; 24
	SetOLED();
 2fe:	0e 94 0c 01 	call	0x218	; 0x218 <SetOLED>
	PORTB |= (1<<PORTB3);
 302:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<PORTB4);
 304:	c4 98       	cbi	0x18, 4	; 24
	SetOLED();
 306:	0e 94 0c 01 	call	0x218	; 0x218 <SetOLED>
 30a:	ff cf       	rjmp	.-2      	; 0x30a <main+0x3c>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
