;#include "ports.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "init_perif.h"
;#include "uart_spi.h"
;#include "delay.h"
;#include "stdint.h"
;//#include "twi.h"
;#include <i2c.h>
;
;// DS1307 Real Time Clock functions
;//#include <ds1307.h>
;
;// uint8_t twi_status_register;
;//	uint8_t i2cstart(uint8_t address);
;//	uint8_t i2cwrite(uint8_t data);
;//	void i2cstop(void);
;//uint8_t i2cstart(uint8_t address)
;//{
;//    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
;//    while(!(TWCR & (1<<TWINT)))
;//        ;
;//
;//    twi_status_register = TW_STATUS & 0xF8;
;//    if ((twi_status_register != TW_START) && (twi_status_register != TW_REP_START))
;//    {
;//        return 1;
;//    }
;//
;//    TWDR = address;
;//    TWCR = (1<<TWINT) | (1<<TWEN);
;//
;//    while(!(TWCR & (1<<TWINT)))
;//        ;
;//
;//    twi_status_register = TW_STATUS & 0xF8;
;//    if ((twi_status_register != TW_MT_SLA_ACK) && (twi_status_register != TW_MR_SLA_ACK))
;//    {
;//        return 1;
;//    }
;//    return 0;
;//}
;//
;//uint8_t i2cwrite(uint8_t data)
;//{
;//    TWDR = data;
;//    TWCR = (1<<TWINT) | (1<<TWEN);
;//
;//    while(!(TWCR & (1<<TWINT)));
;//
;//    twi_status_register = TW_STATUS & 0xF8;
;//    if (twi_status_register != TW_MT_DATA_ACK)
;//    {
;//        return 1;
;//    }
;//    else
;//    {
;//        return 0;
;//    }
;//}
;//
;//void i2cstop(void)
;//{
;//	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
;//	while(TWCR & (1<<TWSTO));
;//}
;
;void InitLed()
; 0000 0043 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0044     int i = 0;
; 0000 0045     while(i < 4)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	i -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0046     {
; 0000 0047         // инициализация дисплея
; 0000 0048         PORTB &= ~(1<<PORTB4);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0049         SPDR = 0x0F;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004A         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004B         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 004C         //_delay_ms(50);
; 0000 004D 
; 0000 004E         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 004F         SPDR = 0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0050         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0051         PORTB |= (1<<PORTB4);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0052 
; 0000 0053 
; 0000 0054         PORTB &= ~(1<<PORTB4);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0055         SPDR = 0x0C;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0056         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0057         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0058         //_delay_ms(50);
; 0000 0059 
; 0000 005A         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 005B         SPDR = 0x01;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005C         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005D         PORTB |= (1<<PORTB4);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005E 
; 0000 005F 
; 0000 0060         PORTB &= ~(1<<PORTB4);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0061         SPDR = 0x0A;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0062         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0063         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0064         //_delay_ms(50);
; 0000 0065 
; 0000 0066         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0067         SPDR = 0x0F;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0068         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0069         PORTB |= (1<<PORTB4);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006A 
; 0000 006B 
; 0000 006C         PORTB &= ~(1<<PORTB4);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006D         SPDR = 0x0B;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006E         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006F         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0070         //_delay_ms(50);
; 0000 0071 
; 0000 0072         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0073         SPDR = 0x07;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0074         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0075         PORTB |= (1<<PORTB4);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0076 
; 0000 0077 
; 0000 0078         PORTB &= ~(1<<PORTB4);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0079         SPDR = 0x09;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007A         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 007B         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 007C         //_delay_ms(50);
; 0000 007D 
; 0000 007E         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 007F 		SPDR = 0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0080 		while(!(SPSR & (1<<SPIF)));
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0081 		PORTB |= (1<<PORTB4);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0082 
; 0000 0083         i++;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0084 	}
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0085 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;// Declare your global variables here
;void SPI_WriteStartByte(char data)
; 0000 0089 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008A    PORTB &= ~(1<<PORTB4);
;PCODE: $00000084 VOL: 0
;	data -> Y+0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 008B    SPDR = data;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008C    while(!(SPSR & (1<<SPIF)));
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 008D }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
;void SPI_WriteEndByte(char data)
; 0000 0090 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0091    SPDR = data;
;PCODE: $00000094 VOL: 0
;	data -> Y+0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0092    while(!(SPSR & (1<<SPIF)));
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0093    PORTB |= (1<<PORTB4);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0094 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;
;void SendLed(char adr, char data)
; 0000 0097 {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0098     char a, b;
; 0000 0099     a = adr;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;	adr -> Y+3
;	data -> Y+2
;	a -> R17
;	b -> R16
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 009A     b = data;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 009B 
; 0000 009C     SPI_WriteStartByte(adr);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 009D     //delay_ms(10);
; 0000 009E     SPI_WriteEndByte(data);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 009F     //delay_ms(10);
; 0000 00A0 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;
;void main(void)
; 0000 00A3 {
;PCODE: $000000B6 VOL: 0
; 0000 00A4 
; 0000 00A5     int i = 0;// Declare your local variables here
; 0000 00A6     char j = 0;
; 0000 00A7     init_ports();
;	i -> R16,R17
;	j -> R19
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A8     init_periferal();
;PCODE: $000000BC VOL: 0
; 0000 00A9     //
; 0000 00AA     // Global enable interrupts
; 0000 00AB     #asm("sei")
;PCODE: $000000BD VOL: 0
	sei
;PCODE: $000000BE VOL: 0
; 0000 00AC     InitLed();
;PCODE: $000000BF VOL: 0
; 0000 00AD     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00AE 
; 0000 00AF         // Bit-Banged I2C Bus initialization
; 0000 00B0     // I2C Port: PORTC
; 0000 00B1     // I2C SDA bit: 1
; 0000 00B2     // I2C SCL bit: 0
; 0000 00B3     // Bit Rate: 100 kHz
; 0000 00B4     // Note: I2C settings are specified in the
; 0000 00B5     // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00B6     i2c_init();
;PCODE: $000000C2 VOL: 0
; 0000 00B7 
; 0000 00B8     // DS1307 Real Time Clock initialization
; 0000 00B9     // Square wave output on pin SQW/OUT: Off
; 0000 00BA     // SQW/OUT pin state: 0
; 0000 00BB     rtc_init(0,0,0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00BC     while(i <= 4)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00BD     {
; 0000 00BE         for(j = 0; j <= 8; j++)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00BF         {
; 0000 00C0             SendLed(j,0);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00C1         }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00C2 //        SendLed(1,0);
; 0000 00C3 //        SendLed(2,0);
; 0000 00C4 //        SendLed(3,0);
; 0000 00C5 //        SendLed(4,0);
; 0000 00C6 //        SendLed(5,0);
; 0000 00C7 //        SendLed(6,0);
; 0000 00C8 //        SendLed(7,0);
; 0000 00C9 //        SendLed(8,0);
; 0000 00CA         i++;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00CB         //delay_ms(10);
; 0000 00CC     }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00CD 
; 0000 00CE     SendLed(0, 1);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00CF     SendLed(5, 7);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00D0 //    delay_ms(1);
; 0000 00D1 //    SendLed(1,2);
; 0000 00D2 //    delay_ms(1);
; 0000 00D3 //    SendLed(1,3);
; 0000 00D4 //    delay_ms(1);
; 0000 00D5 //    SendLed(1,4);
; 0000 00D6 //    delay_ms(1);
; 0000 00D7 //    SendLed(1,5);
; 0000 00D8 //    delay_ms(1);
; 0000 00D9 //    SendLed(2,255);
; 0000 00DA 
; 0000 00DB     while (1)
;PCODE: $000000E8 VOL: 0
; 0000 00DC     {
; 0000 00DD 
; 0000 00DE     }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00DF }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
