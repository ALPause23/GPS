;#include "ports.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "init_perif.h"
;#include "uart_spi.h"
;#include "delay.h"
;
;
;
;void InitLed()
; 0000 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000A     int i = 0;
; 0000 000B     for(i; i < 4; i++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	i -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 000C     {
; 0000 000D         // инициализация дисплея
; 0000 000E         PORTB &= ~(1<<PORTB4);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 000F         SPDR = 0x0F;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0010         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0011         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0012         //_delay_ms(50);
; 0000 0013 
; 0000 0014         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0015         SPDR = 0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0016         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0017         PORTB |= (1<<PORTB4);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0018 
; 0000 0019 
; 0000 001A         PORTB &= ~(1<<PORTB4);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001B         SPDR = 0x0C;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001C         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 001D         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 001E         //_delay_ms(50);
; 0000 001F 
; 0000 0020         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0021         SPDR = 0x01;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0022         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0023         PORTB |= (1<<PORTB4);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0024 
; 0000 0025 
; 0000 0026         PORTB &= ~(1<<PORTB4);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0027         SPDR = 0x0A;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0028         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0029         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 002A         //_delay_ms(50);
; 0000 002B 
; 0000 002C         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 002D         SPDR = 0x0F;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002E         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002F         PORTB |= (1<<PORTB4);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0030 
; 0000 0031 
; 0000 0032         PORTB &= ~(1<<PORTB4);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0033         SPDR = 0x0B;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0034         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0035         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0036         //_delay_ms(50);
; 0000 0037 
; 0000 0038         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0039         SPDR = 0x07;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003A         while(!(SPSR & (1<<SPIF)));
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003B         PORTB |= (1<<PORTB4);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003C 
; 0000 003D 
; 0000 003E         PORTB &= ~(1<<PORTB4);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003F         SPDR = 0x09;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0040         while(!(SPSR & (1<<SPIF)));
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0041         //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0042         //_delay_ms(50);
; 0000 0043 
; 0000 0044         //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0045 		SPDR = 0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0046 		while(!(SPSR & (1<<SPIF)));
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0047 		PORTB |= (1<<PORTB4);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0048 	}
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0049 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;// Declare your global variables here
;void SPI_WriteByte()
; 0000 004D {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004E    PORTB &= ~(1<<PORTB4);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004F    SPDR = 0b100011111111;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0050    while(!(SPSR & (1<<SPIF)));
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0051    PORTB |= (1<<PORTB4);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0052 }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;void SendLed(int i)
; 0000 0055 {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0056 
; 0000 0057     char a, b;
; 0000 0058     a = (i >> 8);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;	i -> Y+2
;	a -> R17
;	b -> R16
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0059     b = i;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 005A 
; 0000 005B 
; 0000 005C     PORTB &= ~(1<<PORTB4);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 005D     SPDR = a;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 005E     while(!(SPSR & (1<<SPIF)));
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 005F     //PORTB |= (1<<PORTB4); //высокий уровень
; 0000 0060     //_delay_ms(50);
; 0000 0061 
; 0000 0062     //PORTB &= ~(1<<PORTB4); //низкий уровень
; 0000 0063     SPDR = b;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0064     while(!(SPSR & (1<<SPIF)));
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0065     PORTB |= (1<<PORTB4);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0066 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;
;void main(void)
; 0000 0069 {
;PCODE: $000000BC VOL: 0
; 0000 006A     int qaz;
; 0000 006B 
; 0000 006C     // Declare your local variables here
; 0000 006D     init_ports();
;	qaz -> R16,R17
;PCODE: $000000BD VOL: 0
; 0000 006E     init_periferal();
;PCODE: $000000BE VOL: 0
; 0000 006F     //
; 0000 0070     // Global enable interrupts
; 0000 0071     #asm("sei")
;PCODE: $000000BF VOL: 0
	sei
;PCODE: $000000C0 VOL: 0
; 0000 0072     InitLed();
;PCODE: $000000C1 VOL: 0
; 0000 0073 
; 0000 0074 
; 0000 0075     while (1)
;PCODE: $000000C2 VOL: 0
; 0000 0076     {
; 0000 0077          SendLed(0x00);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0078         SendLed(0x100);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0079         SendLed(0x200);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 007A         SendLed(0x300);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 007B         SendLed(0x400);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 007C         SendLed(0x500);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 007D         SendLed(0x600);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 007E         SendLed(0x700);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 007F         SendLed(0x800);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0080         delay_ms(1000);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0081     }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0082 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
