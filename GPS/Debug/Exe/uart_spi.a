;#include "uart_spi.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//#include "init_perif.h"
;
;char rx_buffer[RX_BUFFER_SIZE];
;
;unsigned char rx_wr_index = 0, rx_rd_index = 0;
;
;unsigned char rx_counter = 0;
;
;bit rx_buffer_overflow;
;int i = 0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0003 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0010     //rx_buffer[i++] = USARTReceiveChar();
; 0003 0011     char status,data;
; 0003 0012     status = UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 0013     data = UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 0014     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0003 0015        {
; 0003 0016        rx_buffer[rx_wr_index++] = data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 0017     #if RX_BUFFER_SIZE == 256
; 0003 0018        // special case for receiver buffer size=256
; 0003 0019        if (++rx_counter == 0) rx_buffer_overflow=1;
; 0003 001A     #else
; 0003 001B        if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0003 001C        if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0003 001D           {
; 0003 001E           rx_counter = 0;
;PCODE: $00000026 VOL: 0
; 0003 001F           rx_buffer_overflow = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 0020           }
; 0003 0021     #endif
; 0003 0022        }
;PCODE: $0000002A VOL: 0
; 0003 0023 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;//#pragma vector = USART_RXC
;//__interrupt void usart_rx_isr(void)
;//{
;//  rx_buffer[i++] = USARTReceiveChar();
;//}
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0003 002F {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 0030     char data;
; 0003 0031     while (rx_counter == 0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 0032     data = rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0003 0033     #if RX_BUFFER_SIZE != 256
; 0003 0034     if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0035     #endif
; 0003 0036     #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0003 0037     --rx_counter;
;PCODE: $00000044 VOL: 0
; 0003 0038     #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0003 0039     return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0003 003A }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;char USARTReceiveChar(void) {
; 0003 003E char USARTReceiveChar(void) {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0003 003F   //  Устанавливается, когда регистр свободен
; 0003 0040   while(!(UCSRA & (1<<RXC)));
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 0041   return UDR;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0003 0042 }
;PCODE: $00000055 VOL: 0
;
